import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as e,b as a,e as i,f as l,r,o as d}from"./app-BBs2hMIi.js";const o="/ClBlogs/assets/pages/golang-program/3-1.png",c="/ClBlogs/assets/pages/golang-program/3-2.png",u="/ClBlogs/assets/pages/golang-program/3-3.jpg",m={},h={href:"https://github.com/marmotedu/iam/blob/v1.0.0/scripts/install/redis.sh#L20",target:"_blank",rel:"noopener noreferrer"};function v(g,s){const n=r("VPIcon");return d(),p("div",null,[s[7]||(s[7]=e(`<h1 id="_03-项目部署-如何快速部署-iam-系统" tabindex="-1"><a class="header-anchor" href="#_03-项目部署-如何快速部署-iam-系统"><span>03 项目部署：如何快速部署 IAM 系统？</span></a></h1><p>你好，我是孔令飞。</p><p>上一讲，我们一起安装和配置了一个基本的 Go 开发环境。这一讲，我就来教你怎么在它的基础上，快速部署好 IAM 系统。</p><p>因为我们要通过一个 IAM 项目来讲解怎么开发企业级 Go 项目，所以你要对 IAM 项目有比较好的了解，了解 IAM 项目一个最直接有效的方式就是去部署和使用它。</p><p>这不仅能让你了解到 IAM 系统中各个组件功能之间的联系，加深你对 IAM 系统的理解，还可以协助你排障，尤其是跟部署相关的故障。此外，部署好 IAM 系统也能给你后面的学习准备好实验环境，边学、边练，从而提高你的学习效率。</p><p>所以，今天我们专门花一讲的时间来说说怎么部署和使用 IAM 系统。同时，因为 IAM 系统是一个企业级的项目，有一定的复杂度，我建议你严格按照我说的步骤去操作，否则可能会安装失败。</p><p>总的来说，我把部署过程分成 2 大步。</p><ol><li>安装和配置数据库：我们需要安装和配置 MariaDB、Redis和MongoDB。</li><li>安装和配置 IAM 服务：我们需要安装和配置 iam-apiserver、iam-authz-server、iam-pump、iamctl和man 文件。</li></ol><p>当然啦，如果你实在不想这么麻烦地去安装，我也在这一讲的最后给出了一键部署 IAM 系统的方法，但我还是希望你能按照我今天讲的详细步骤来操作。</p><p>那话不多说，我们直接开始操作吧！</p><h2 id="下载-iam-项目代码" tabindex="-1"><a class="header-anchor" href="#下载-iam-项目代码"><span>下载 iam 项目代码</span></a></h2><p>因为 IAM 的安装脚本存放在 iam 代码仓库中，安装需要的二进制文件也需要通过 iam 代码构建，所以在安装之前，我们需要先下载 iam 代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ mkdir -p $WORKSPACE/golang/src/github.com/marmotedu</span></span>
<span class="line"><span>$ cd $WORKSPACE/golang/src/github.com/marmotedu</span></span>
<span class="line"><span>$ git clone --depth=1 https://github.com/marmotedu/iam</span></span>
<span class="line"><span>$ go work use ./iam</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，marmotedu 和 marmotedu/iam 目录存放了本实战项目的代码，在学习过程中，你需要频繁访问这 2 个目录，为了访问方便，我们可以追加如下 2 个环境变量和 2 个 alias 到<code>$HOME/.bashrc</code> 文件中：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ tee -a $HOME/.bashrc &lt;&lt; &#39;EOF&#39;</span></span>
<span class="line"><span># Alias for quick access</span></span>
<span class="line"><span>export GOSRC=&quot;$WORKSPACE/golang/src&quot;</span></span>
<span class="line"><span>export IAM_ROOT=&quot;$GOSRC/github.com/marmotedu/iam&quot;</span></span>
<span class="line"><span>alias mm=&quot;cd $GOSRC/github.com/marmotedu&quot;</span></span>
<span class="line"><span>alias i=&quot;cd $GOSRC/github.com/marmotedu/iam&quot;</span></span>
<span class="line"><span>EOF</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，你就可以先通过执行 alias 命令 <code>mm</code> 访问 <code>$GOSRC/github.com/marmotedu</code> 目录；通过执行 alias 命令 <code>i</code> 访问 <code>$GOSRC/github.com/marmotedu/iam</code> 目录。</p><p>这里我也建议你善用 alias，将常用操作配置成 alias，方便以后操作。</p><p>在安装配置之前需要执行以下命令export going用户的密码，这里假设密码是 <code>iam59!z$</code>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>export LINUX_PASSWORD=&#39;iam59!z$&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="安装和配置数据库" tabindex="-1"><a class="header-anchor" href="#安装和配置数据库"><span>安装和配置数据库</span></a></h2><p>因为 IAM 系统用到了 MariaDB、Redis、MongoDB 数据库来存储数据，而 IAM 服务在启动时会先尝试连接这些数据库，所以为了避免启动时连接数据库失败，这里我们先来安装需要的数据库。</p><h3 id="安装和配置-mariadb" tabindex="-1"><a class="header-anchor" href="#安装和配置-mariadb"><span>安装和配置 MariaDB</span></a></h3><p>IAM 会把 REST 资源的定义信息存储在关系型数据库中，关系型数据库我选择了 MariaDB。为啥选择 MariaDB，而不是 MySQL呢？。选择 MariaDB 一方面是因为它是发展最快的 MySQL 分支，相比 MySQL，它加入了很多新的特性，并且它能够完全兼容 MySQL，包括 API 和命令行。另一方面是因为 MariaDB 是开源的，而且迭代速度很快。</p><p>首先，我们可以通过以下命令安装和配置 MariaDB，并将 Root 密码设置为 <code>iam59!z$</code>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ cd $IAM_ROOT</span></span>
<span class="line"><span>$ ./scripts/install/mariadb.sh iam::mariadb::install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们可以通过以下命令，来测试 MariaDB 是否安装成功：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ mysql -h127.0.0.1 -uroot -p&#39;iam59!z$&#39;</span></span>
<span class="line"><span>MariaDB [(none)]&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装和配置-redis" tabindex="-1"><a class="header-anchor" href="#安装和配置-redis"><span>安装和配置 Redis</span></a></h3><p>在 IAM 系统中，由于 iam-authz-server 是从 iam-apiserver 拉取并缓存用户的密钥/策略信息的，因此同一份密钥/策略数据会分别存在 2 个服务中，这可能会出现数据不一致的情况。数据不一致会带来一些问题，例如当我们通过 iam-apiserver 创建了一对密钥，但是这对密钥还没有被 iam-authz-server 缓存，这时候通过这对密钥访问 iam-authz-server 就会访问失败。</p><p>为了保证数据的一致性，我们可以使用 Redis 的发布订阅(pub/sub)功能进行消息通知。同时，iam-authz-server 也会将授权审计日志缓存到 Redis 中，所以也需要安装 Redis key-value 数据库。我们可以通过以下命令来安装和配置 Redis，并将 Redis 的初始密码设置为 <code>iam59!z$</code> ：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ cd $IAM_ROOT</span></span>
<span class="line"><span>$ ./scripts/install/redis.sh iam::redis::install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,31)),a("p",null,[s[2]||(s[2]=i("这里我们要注意，scripts/install/redis.sh 脚本中 iam")),l(n,{icon:"redis"}),s[3]||(s[3]=i("install 函数对 Redis 做了一些配置，例如修改 Redis 使其以守护进程的方式运行、修改 Redis 的密码为 ")),s[4]||(s[4]=a("code",null,"iam59!z$",-1)),s[5]||(s[5]=i("等，详细配置可参考函数 ")),a("a",h,[s[0]||(s[0]=i("iam")),l(n,{icon:"redis"}),s[1]||(s[1]=i("install"))]),s[6]||(s[6]=i(" 函数。"))]),s[8]||(s[8]=e(`<p>安装完成后，我们可以通过以下命令，来测试 Redis 是否安装成功：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span> $ redis-cli -h 127.0.0.1 -p 6379 -a &#39;iam59!z$&#39; # 连接 Redis，-h 指定主机，-p 指定监听端口，-a 指定登录密码</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="安装和配置-mongodb" tabindex="-1"><a class="header-anchor" href="#安装和配置-mongodb"><span>安装和配置 MongoDB</span></a></h3><p>因为 iam-pump 会将 iam-authz-server 产生的数据处理后存储在 MongoDB 中，所以我们也需要安装 MongoDB 数据库。主要分两步安装：首先安装 MongoDB，然后再创建 MongoDB 账号。</p><h4 id="第-1-步-安装-mongodb" tabindex="-1"><a class="header-anchor" href="#第-1-步-安装-mongodb"><span>第 1 步，安装 MongoDB</span></a></h4><p>首先，我们可以通过以下 4 步来安装 MongoDB。</p><ol><li>配置 MongoDB yum 源，并安装 MongoDB。</li></ol><p>CentOS8.x 系统默认没有配置安装 MongoDB 需要的 yum 源，所以我们需要先配置好 yum 源再安装：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ sudo tee /etc/yum.repos.d/mongodb-org-5.0.repo&lt;&lt;&#39;EOF&#39;</span></span>
<span class="line"><span>[mongodb-org-5.0]</span></span>
<span class="line"><span>name=MongoDB Repository</span></span>
<span class="line"><span>baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/5.0/x86_64/</span></span>
<span class="line"><span>gpgcheck=1</span></span>
<span class="line"><span>enabled=1</span></span>
<span class="line"><span>gpgkey=https://www.mongodb.org/static/pgp/server-5.0.asc</span></span>
<span class="line"><span>EOF</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$ sudo yum install -y mongodb-org</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>关闭 SELinux。</li></ol><p>在安装的过程中，SELinux 有可能会阻止 MongoDB 访问/sys/fs/cgroup，所以我们还需要关闭 SELinux：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ sudo setenforce 0</span></span>
<span class="line"><span>$ sudo sed -i &#39;s/^SELINUX=.*$/SELINUX=disabled/&#39; /etc/selinux/config # 永久关闭 SELINUX</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>开启外网访问权限和登录验证。</li></ol><p>MongoDB 安装完之后，默认情况下是不会开启外网访问权限和登录验证，为了方便使用，我建议你先开启这些功能，执行如下命令开启：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ sudo sed -i &#39;/bindIp/{s/127.0.0.1/0.0.0.0/}&#39; /etc/mongod.conf</span></span>
<span class="line"><span>$ sudo sed -i &#39;/^#security/a\\security:\\n  authorization: enabled&#39; /etc/mongod.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>启动 MongoDB。</li></ol><p>配置完 MongoDB 之后，我们就可以启动它了，具体的命令如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ sudo systemctl start mongod</span></span>
<span class="line"><span>$ sudo systemctl enable mongod # 设置开机启动</span></span>
<span class="line"><span>$ sudo systemctl status mongod # 查看 mongod 运行状态，如果输出中包含 active (running)字样说明 mongod 成功启动</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装完 MongoDB 后，我们就可以通过 <code>mongo</code> 命令登录 MongoDB Shell。如果没有报错，就说明 MongoDB 被成功安装了。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ mongosh --quiet &quot;mongodb://127.0.0.1:27017&quot;</span></span>
<span class="line"><span>test&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="第-2-步-创建-mongodb-账号" tabindex="-1"><a class="header-anchor" href="#第-2-步-创建-mongodb-账号"><span>第 2 步，创建 MongoDB 账号</span></a></h4><p>安装完 MongoDB 之后，默认是没有用户账号的，为了方便 IAM 服务使用，我们需要先创建好管理员账号，通过管理员账户登录 MongoDB，我们可以执行创建普通用户、数据库等操作。</p><ol><li>创建管理员账户。</li></ol><p>首先，我们通过 <code>use admin</code> 指令切换到 admin 数据库，再通过 <code>db.auth(&quot;用户名&quot;，&quot;用户密码&quot;)</code> 验证用户登录权限。如果返回 1 表示验证成功；如果返回 0 表示验证失败。具体的命令如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ mongosh --quiet &quot;mongodb://127.0.0.1:27017&quot;</span></span>
<span class="line"><span>test&gt; use admin</span></span>
<span class="line"><span>switched to db admin</span></span>
<span class="line"><span>admin&gt; db.createUser({user:&quot;root&quot;,pwd:&quot;iam59!z$&quot;,roles:[&quot;root&quot;]})</span></span>
<span class="line"><span>{ ok: 1 }</span></span>
<span class="line"><span>admin&gt; db.auth(&quot;root&quot;, &quot;iam59!z$&quot;)</span></span>
<span class="line"><span>{ ok: 1 }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，如果想删除用户，可以使用 <code>db.dropUser(&quot;用户名&quot;)</code> 命令。</p><p><code>db.createUser</code> 用到了以下 3 个参数。</p><ul><li>user: 用户名。</li><li>pwd: 用户密码。</li><li>roles: 用来设置用户的权限，比如读、读写、写等。</li></ul><p>因为 admin 用户具有 MongoDB 的 Root 权限，权限过大安全性会降低。为了提高安全性，我们还需要创建一个 iam 普通用户来连接和操作 MongoDB。</p><ol start="2"><li>创建 iam 用户，命令如下：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ mongosh --quiet mongodb://root:&#39;iam59!z$&#39;@127.0.0.1:27017/iam_analytics?authSource=admin # 用管理员账户连接 MongoDB</span></span>
<span class="line"><span>iam_analytics&gt; db.createUser({user:&quot;iam&quot;,pwd:&quot;iam59!z$&quot;,roles:[&quot;dbOwner&quot;]})</span></span>
<span class="line"><span>{ ok: 1 }</span></span>
<span class="line"><span>iam_analytics&gt; db.auth(&quot;iam&quot;, &quot;iam59!z$&quot;)</span></span>
<span class="line"><span>{ ok: 1 }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建完 iam 普通用户后，我们就可以通过 iam 用户登录 MongoDB 了：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ mongosh --quiet mongodb://iam:&#39;iam59!z$&#39;@127.0.0.1:27017/iam_analytics?authSource=iam_analytics</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>至此，我们成功安装了 IAM 系统需要的数据库 MariaDB、Redis 和 MongoDB。</p><h2 id="安装和配置-iam-系统" tabindex="-1"><a class="header-anchor" href="#安装和配置-iam-系统"><span>安装和配置 IAM 系统</span></a></h2><p>要想完成 IAM 系统的安装，我们还需要安装和配置 iam-apiserver、iam-authz-server、iam-pump 和 iamctl。这些组件的功能我们在<a href="https://kbchulan.github.io/ClBlogs/excerpts/golang-program/01-golang-program.html" target="_blank" rel="noopener noreferrer">第1讲</a>详细讲过，如果不记得你可以翻回去看看。</p><blockquote><p>提示：IAM 项目我会长期维护、定期更新，欢迎你 Star &amp; Contributing。</p></blockquote><h3 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作"><span>准备工作</span></a></h3><p>在开始安装之前，我们需要先做一些准备工作，主要有 5 步。</p><ol><li>初始化 MariaDB 数据库，创建 iam 数据库。</li><li>配置 scripts/install/environment.sh。</li><li>创建需要的目录。</li><li>创建 CA 根证书和密钥。</li><li>配置 hosts。</li></ol><p><strong>第 1 步，初始化 MariaDB 数据库，创建 iam 数据库。</strong></p><p>安装完 MariaDB 数据库之后，我们需要在 MariaDB 数据库中创建 IAM 系统需要的数据库、表和存储过程，以及创建 SQL 语句保存在 IAM 代码仓库中的 configs/iam.sql 文件中。具体的创建步骤如下。</p><ol><li>登录数据库并创建 iam 用户。</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ cd $IAM_ROOT</span></span>
<span class="line"><span>$ mysql -h127.0.0.1 -P3306 -uroot -p&#39;iam59!z$&#39; # 连接 MariaDB，-h 指定主机，-P 指定监听端口，-u 指定登录用户，-p 指定登录密码</span></span>
<span class="line"><span>MariaDB [(none)]&gt; grant all on iam.* TO [email protected] identified by &#39;iam59!z$&#39;;</span></span>
<span class="line"><span>Query OK, 0 rows affected (0.000 sec)</span></span>
<span class="line"><span>MariaDB [(none)]&gt; flush privileges;</span></span>
<span class="line"><span>Query OK, 0 rows affected (0.000 sec)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>用 iam 用户登录 MariaDB，执行 iam.sql 文件，创建 iam 数据库。</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ mysql -h127.0.0.1 -P3306 -uiam -p&#39;iam59!z$&#39;</span></span>
<span class="line"><span>MariaDB [(none)]&gt; source configs/iam.sql;</span></span>
<span class="line"><span>MariaDB [iam]&gt; show databases;</span></span>
<span class="line"><span>+--------------------+</span></span>
<span class="line"><span>| Database           |</span></span>
<span class="line"><span>+--------------------+</span></span>
<span class="line"><span>| iam                |</span></span>
<span class="line"><span>| information_schema |</span></span>
<span class="line"><span>+--------------------+</span></span>
<span class="line"><span>2 rows in set (0.000 sec)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的命令会创建 iam 数据库，并创建以下数据库资源。</p><ul><li>表：user 是用户表，用来存放用户信息；secret 是密钥表，用来存放密钥信息；policy 是策略表，用来存放授权策略信息；policy_audit 是策略历史表，被删除的策略会被转存到该表。</li><li>admin 用户：在 user 表中，我们需要创建一个管理员用户，用户名是 admin，密码是 Admin@2021。</li><li>存储过程：删除用户时会自动删除该用户所属的密钥和策略信息。</li></ul><p><strong>第 2 步，配置 scripts/install/environment.sh。</strong></p><p>IAM 组件的安装配置都是通过环境变量文件 <a href="https://github.com/marmotedu/iam/blob/master/scripts/install/environment.sh" target="_blank" rel="noopener noreferrer">scripts/install/environment.sh</a> 进行配置的，所以我们要先配置好 scripts/install/environment.sh 文件。这里，你可以直接使用默认值，提高你的安装效率。</p><p><strong>第 3 步，创建需要的目录。</strong></p><p>在安装和运行 IAM 系统的时候，我们需要将配置、二进制文件和数据文件存放到指定的目录。所以我们需要先创建好这些目录，创建步骤如下。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ cd $IAM_ROOT</span></span>
<span class="line"><span>$ source scripts/install/environment.sh</span></span>
<span class="line"><span>$ sudo mkdir -p \${IAM_DATA_DIR}/{iam-apiserver,iam-authz-server,iam-pump} # 创建 Systemd WorkingDirectory 目录</span></span>
<span class="line"><span>$ sudo mkdir -p \${IAM_INSTALL_DIR}/bin #创建 IAM 系统安装目录</span></span>
<span class="line"><span>$ sudo mkdir -p \${IAM_CONFIG_DIR}/cert # 创建 IAM 系统配置文件存放目录</span></span>
<span class="line"><span>$ sudo mkdir -p \${IAM_LOG_DIR} # 创建 IAM 日志文件存放目录</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第 4 步， 创建 CA 根证书和密钥。</strong></p><p>为了确保安全，IAM 系统各组件需要使用 x509 证书对通信进行加密和认证。所以，这里我们需要先创建 CA 证书。CA 根证书是所有组件共享的，只需要创建一个 CA 证书，后续创建的所有证书都由它签名。</p><p>我们可以使用 CloudFlare 的 PKI 工具集 cfssl 来创建所有的证书。</p><ol><li>安装 cfssl 工具集。</li></ol><p>我们可以直接安装 cfssl 已经编译好的二进制文件，cfssl 工具集中包含很多工具，这里我们需要安装 cfssl、cfssljson、cfssl-certinfo，功能如下。</p><ul><li>cfssl：证书签发工具。</li><li>cfssljson：将 cfssl 生成的证书（json 格式）变为文件承载式证书。</li></ul><p>这两个工具的安装方法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ cd $IAM_ROOT</span></span>
<span class="line"><span>$ ./scripts/install/install.sh iam::install::install_cfssl</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>创建配置文件。</li></ol><p>CA 配置文件是用来配置根证书的使用场景 (profile) 和具体参数 (usage、过期时间、服务端认证、客户端认证、加密等)，可以在签名其它证书时用来指定特定场景：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ cd $IAM_ROOT</span></span>
<span class="line"><span>$ tee ca-config.json &lt;&lt; EOF</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;signing&quot;: {</span></span>
<span class="line"><span>    &quot;default&quot;: {</span></span>
<span class="line"><span>      &quot;expiry&quot;: &quot;87600h&quot;</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;profiles&quot;: {</span></span>
<span class="line"><span>      &quot;iam&quot;: {</span></span>
<span class="line"><span>        &quot;usages&quot;: [</span></span>
<span class="line"><span>          &quot;signing&quot;,</span></span>
<span class="line"><span>          &quot;key encipherment&quot;,</span></span>
<span class="line"><span>          &quot;server auth&quot;,</span></span>
<span class="line"><span>          &quot;client auth&quot;</span></span>
<span class="line"><span>        ],</span></span>
<span class="line"><span>        &quot;expiry&quot;: &quot;876000h&quot;</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>EOF</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 JSON 配置中，有一些字段解释如下。</p><ul><li>signing：表示该证书可用于签名其它证书（生成的 ca.pem 证书中 CA=TRUE）。</li><li>server auth：表示 client 可以用该证书对 server 提供的证书进行验证。</li><li>client auth：表示 server 可以用该证书对 client 提供的证书进行验证。</li><li>expiry：876000h，证书有效期设置为 100 年。</li></ul><ol start="3"><li>创建证书签名请求文件。</li></ol><p>我们创建用来生成 CA 证书签名请求（CSR）的 JSON 配置文件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ cd $IAM_ROOT</span></span>
<span class="line"><span>$ tee ca-csr.json &lt;&lt; EOF</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;CN&quot;: &quot;iam-ca&quot;,</span></span>
<span class="line"><span>  &quot;key&quot;: {</span></span>
<span class="line"><span>    &quot;algo&quot;: &quot;rsa&quot;,</span></span>
<span class="line"><span>    &quot;size&quot;: 2048</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;names&quot;: [</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>      &quot;C&quot;: &quot;CN&quot;,</span></span>
<span class="line"><span>      &quot;ST&quot;: &quot;BeiJing&quot;,</span></span>
<span class="line"><span>      &quot;L&quot;: &quot;BeiJing&quot;,</span></span>
<span class="line"><span>      &quot;O&quot;: &quot;marmotedu&quot;,</span></span>
<span class="line"><span>      &quot;OU&quot;: &quot;iam&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  ],</span></span>
<span class="line"><span>  &quot;ca&quot;: {</span></span>
<span class="line"><span>    &quot;expiry&quot;: &quot;876000h&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>EOF</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 JSON 配置中，有一些字段解释如下。</p><ul><li>C：Country，国家。</li><li>ST：State，省份。</li><li>L：Locality (L) or City，城市。</li><li>CN：Common Name，iam-apiserver 从证书中提取该字段作为请求的用户名 (User Name) ，浏览器使用该字段验证网站是否合法。</li><li>O：Organization，iam-apiserver 从证书中提取该字段作为请求用户所属的组 (Group)。</li><li>OU：Company division (or Organization Unit – OU)，部门/单位。</li></ul><p>除此之外，还有两点需要我们注意。</p><ul><li>不同证书 csr 文件的 CN、C、ST、L、O、OU 组合必须不同，否则可能出现 <code>PEER&#39;S CERTIFICATE HAS AN INVALID SIGNATURE</code> 错误。</li><li>后续创建证书的 csr 文件时，CN、OU都不相同（C、ST、L、O相同），以达到区分的目的。</li></ul><ol start="4"><li>创建 CA 证书和私钥</li></ol><p>首先，我们通过 <code>cfssl gencert</code> 命令来创建：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ cd $IAM_ROOT</span></span>
<span class="line"><span>$ source scripts/install/environment.sh</span></span>
<span class="line"><span>$ cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span></span>
<span class="line"><span>$ ls ca*</span></span>
<span class="line"><span>ca-config.json  ca.csr  ca-csr.json  ca-key.pem  ca.pem</span></span>
<span class="line"><span>$ sudo mv ca* \${IAM_CONFIG_DIR}/cert # 需要将证书文件拷贝到指定文件夹下（分发证书），方便各组件引用</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述命令会创建运行 CA 所必需的文件 ca-key.pem（私钥）和 ca.pem（证书），还会生成 ca.csr（证书签名请求），用于交叉签名或重新签名。</p><p>创建完之后，我们可以通过 <code>cfssl certinfo</code> 命名查看 cert 和 csr 信息：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ cfssl certinfo -cert \${IAM_CONFIG_DIR}/cert/ca.pem # 查看 cert(证书信息)</span></span>
<span class="line"><span>$ cfssl certinfo -csr \${IAM_CONFIG_DIR}/cert/ca.csr # 查看 CSR(证书签名请求)信息</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第 5 步，配置 hosts。</strong></p><p>iam 通过域名访问 API 接口，因为这些域名没有注册过，还不能在互联网上解析，所以需要配置 hosts，具体的操作如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ sudo tee -a /etc/hosts &lt;&lt;EOF</span></span>
<span class="line"><span>127.0.0.1 iam.api.marmotedu.com</span></span>
<span class="line"><span>127.0.0.1 iam.authz.marmotedu.com</span></span>
<span class="line"><span>EOF</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装和配置-iam-apiserver" tabindex="-1"><a class="header-anchor" href="#安装和配置-iam-apiserver"><span>安装和配置 iam-apiserver</span></a></h3><p>完成了准备工作之后，我们就可以安装 IAM 系统的各个组件了。首先我们通过以下 3 步来安装 iam-apiserver 服务。</p><p><strong>第 1 步，创建 iam-apiserver 证书和私钥。</strong></p><p>其它服务为了安全都是通过 HTTPS 协议访问 iam-apiserver，所以我们要先创建 iam-apiserver 证书和私钥。</p><ol><li>创建证书签名请求：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ cd $IAM_ROOT</span></span>
<span class="line"><span>$ source scripts/install/environment.sh</span></span>
<span class="line"><span>$ tee iam-apiserver-csr.json &lt;&lt;EOF</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;CN&quot;: &quot;iam-apiserver&quot;,</span></span>
<span class="line"><span>  &quot;key&quot;: {</span></span>
<span class="line"><span>    &quot;algo&quot;: &quot;rsa&quot;,</span></span>
<span class="line"><span>    &quot;size&quot;: 2048</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;names&quot;: [</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>      &quot;C&quot;: &quot;CN&quot;,</span></span>
<span class="line"><span>      &quot;ST&quot;: &quot;BeiJing&quot;,</span></span>
<span class="line"><span>      &quot;L&quot;: &quot;BeiJing&quot;,</span></span>
<span class="line"><span>      &quot;O&quot;: &quot;marmotedu&quot;,</span></span>
<span class="line"><span>      &quot;OU&quot;: &quot;iam-apiserver&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  ],</span></span>
<span class="line"><span>  &quot;hosts&quot;: [</span></span>
<span class="line"><span>    &quot;127.0.0.1&quot;,</span></span>
<span class="line"><span>    &quot;localhost&quot;,</span></span>
<span class="line"><span>    &quot;iam.api.marmotedu.com&quot;</span></span>
<span class="line"><span>  ]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>EOF</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码中的 hosts 字段是用来指定授权使用该证书的 IP 和域名列表，上面的 hosts 列出了 iam-apiserver 服务的 IP 和域名。</p><ol start="2"><li>生成证书和私钥：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ cfssl gencert -ca=\${IAM_CONFIG_DIR}/cert/ca.pem \\</span></span>
<span class="line"><span>  -ca-key=\${IAM_CONFIG_DIR}/cert/ca-key.pem \\</span></span>
<span class="line"><span>  -config=\${IAM_CONFIG_DIR}/cert/ca-config.json \\</span></span>
<span class="line"><span>  -profile=iam iam-apiserver-csr.json | cfssljson -bare iam-apiserver</span></span>
<span class="line"><span>$ sudo mv iam-apiserver*pem \${IAM_CONFIG_DIR}/cert # 将生成的证书和私钥文件拷贝到配置文件目录</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第 2 步，安装并运行 iam-apiserver。</strong></p><p>iam-apiserver 作为 iam 系统的核心组件，需要第一个安装。</p><ol><li>安装 iam-apiserver 可执行程序：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ cd $IAM_ROOT</span></span>
<span class="line"><span>$ source scripts/install/environment.sh</span></span>
<span class="line"><span>$ make build BINS=iam-apiserver</span></span>
<span class="line"><span>$ sudo cp _output/platforms/linux/amd64/iam-apiserver \${IAM_INSTALL_DIR}/bin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>生成并安装 iam-apiserver 的配置文件（iam-apiserver.yaml）：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ ./scripts/genconfig.sh scripts/install/environment.sh configs/iam-apiserver.yaml &gt; iam-apiserver.yaml</span></span>
<span class="line"><span>$ sudo mv iam-apiserver.yaml \${IAM_CONFIG_DIR}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>创建并安装 iam-apiserver systemd unit 文件：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ ./scripts/genconfig.sh scripts/install/environment.sh init/iam-apiserver.service &gt; iam-apiserver.service</span></span>
<span class="line"><span>$ sudo mv iam-apiserver.service /etc/systemd/system/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>启动 iam-apiserver 服务：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ sudo systemctl daemon-reload</span></span>
<span class="line"><span>$ sudo systemctl enable iam-apiserver</span></span>
<span class="line"><span>$ sudo systemctl restart iam-apiserver</span></span>
<span class="line"><span>$ systemctl status iam-apiserver # 查看 iam-apiserver 运行状态，如果输出中包含 active (running)字样说明 iam-apiserver 成功启动</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第 3 步，测试 iam-apiserver 是否成功安装。</strong></p><p>测试 iam-apiserver 主要是测试 RESTful 资源的 CURD：用户 CURD、密钥 CURD、授权策略 CURD。</p><p>首先，我们需要获取访问 iam-apiserver 的 Token，请求如下 API 访问：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ curl -s -XPOST -H&#39;Content-Type: application/json&#39; -d&#39;{&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;Admin@2021&quot;}&#39; http://127.0.0.1:8080/login | jq -r .token</span></span>
<span class="line"><span>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2MTc5MjI4OTQsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MTc4MzY0OTQsInN1YiI6ImFkbWluIn0.9qztVJseQ9XwqOFVUHNOtG96-KUovndz0SSr_QBsxAA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码中下面的 HTTP 请求通过<code>-H&#39;Authorization: Bearer &lt;Token&gt;&#39;</code> 指定认证头信息，将上面请求的 Token 替换 <code>&lt;Token&gt;</code> 。</p><p><strong>用户 CURD</strong></p><p>创建用户、列出用户、获取用户详细信息、修改用户、删除单个用户、批量删除用户，请求方法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># 创建用户</span></span>
<span class="line"><span>$ curl -s -XPOST -H&#39;Content-Type: application/json&#39; -H&#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2MTc5MjI4OTQsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MTc4MzY0OTQsInN1YiI6ImFkbWluIn0.9qztVJseQ9XwqOFVUHNOtG96-KUovndz0SSr_QBsxAA&#39; -d&#39;{&quot;password&quot;:&quot;User@2021&quot;,&quot;metadata&quot;:{&quot;name&quot;:&quot;colin&quot;},&quot;nickname&quot;:&quot;colin&quot;,&quot;email&quot;:&quot;[email protected]&quot;,&quot;phone&quot;:&quot;1812884xxxx&quot;}&#39; http://127.0.0.1:8080/v1/users</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 列出用户</span></span>
<span class="line"><span>$ curl -s -XGET -H&#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2MTc5MjI4OTQsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MTc4MzY0OTQsInN1YiI6ImFkbWluIn0.9qztVJseQ9XwqOFVUHNOtG96-KUovndz0SSr_QBsxAA&#39; &#39;http://127.0.0.1:8080/v1/users?offset=0&amp;limit=10&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 获取 colin 用户的详细信息</span></span>
<span class="line"><span>$ curl -s -XGET -H&#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2MTc5MjI4OTQsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MTc4MzY0OTQsInN1YiI6ImFkbWluIn0.9qztVJseQ9XwqOFVUHNOtG96-KUovndz0SSr_QBsxAA&#39; http://127.0.0.1:8080/v1/users/colin</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 修改 colin 用户</span></span>
<span class="line"><span>$ curl -s -XPUT -H&#39;Content-Type: application/json&#39; -H&#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2MTc5MjI4OTQsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MTc4MzY0OTQsInN1YiI6ImFkbWluIn0.9qztVJseQ9XwqOFVUHNOtG96-KUovndz0SSr_QBsxAA&#39; -d&#39;{&quot;nickname&quot;:&quot;colin&quot;,&quot;email&quot;:&quot;[email protected]&quot;,&quot;phone&quot;:&quot;1812884xxxx&quot;}&#39; http://127.0.0.1:8080/v1/users/colin</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 删除 colin 用户</span></span>
<span class="line"><span>$ curl -s -XDELETE -H&#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2MTc5MjI4OTQsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MTc4MzY0OTQsInN1YiI6ImFkbWluIn0.9qztVJseQ9XwqOFVUHNOtG96-KUovndz0SSr_QBsxAA&#39; http://127.0.0.1:8080/v1/users/colin</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 批量删除用户</span></span>
<span class="line"><span>$ curl -s -XDELETE -H&#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2MTc5MjI4OTQsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MTc4MzY0OTQsInN1YiI6ImFkbWluIn0.9qztVJseQ9XwqOFVUHNOtG96-KUovndz0SSr_QBsxAA&#39; &#39;http://127.0.0.1:8080/v1/users?name=colin&amp;name=mark&amp;name=john&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>密钥 CURD</strong></p><p>创建密钥、列出密钥、获取密钥详细信息、修改密钥、删除密钥请求方法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># 创建 secret0 密钥</span></span>
<span class="line"><span>$ curl -s -XPOST -H&#39;Content-Type: application/json&#39; -H&#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2MTc5MjI4OTQsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MTc4MzY0OTQsInN1YiI6ImFkbWluIn0.9qztVJseQ9XwqOFVUHNOtG96-KUovndz0SSr_QBsxAA&#39; -d&#39;{&quot;metadata&quot;:{&quot;name&quot;:&quot;secret0&quot;},&quot;expires&quot;:0,&quot;description&quot;:&quot;admin secret&quot;}&#39; http://127.0.0.1:8080/v1/secrets</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 列出所有密钥</span></span>
<span class="line"><span>$ curl -s -XGET -H&#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2MTc5MjI4OTQsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MTc4MzY0OTQsInN1YiI6ImFkbWluIn0.9qztVJseQ9XwqOFVUHNOtG96-KUovndz0SSr_QBsxAA&#39; http://127.0.0.1:8080/v1/secrets</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 获取 secret0 密钥的详细信息</span></span>
<span class="line"><span>$ curl -s -XGET -H&#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2MTc5MjI4OTQsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MTc4MzY0OTQsInN1YiI6ImFkbWluIn0.9qztVJseQ9XwqOFVUHNOtG96-KUovndz0SSr_QBsxAA&#39; http://127.0.0.1:8080/v1/secrets/secret0</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 修改 secret0 密钥</span></span>
<span class="line"><span>$ curl -s -XPUT -H&#39;Content-Type: application/json&#39; -H&#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2MTc5MjI4OTQsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MTc4MzY0OTQsInN1YiI6ImFkbWluIn0.9qztVJseQ9XwqOFVUHNOtG96-KUovndz0SSr_QBsxAA&#39; -d&#39;{&quot;metadata&quot;:{&quot;name&quot;:&quot;secret0&quot;},&quot;expires&quot;:0,&quot;description&quot;:&quot;admin secret(modified)&quot;}&#39; http://127.0.0.1:8080/v1/secrets/secret0</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 删除 secret0 密钥</span></span>
<span class="line"><span>$ curl -s -XDELETE -H&#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2MTc5MjI4OTQsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MTc4MzY0OTQsInN1YiI6ImFkbWluIn0.9qztVJseQ9XwqOFVUHNOtG96-KUovndz0SSr_QBsxAA&#39; http://127.0.0.1:8080/v1/secrets/secret0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们要注意，因为密钥属于重要资源，被删除会导致所有的访问请求失败，所以密钥不支持批量删除。</p><p><strong>授权策略 CURD</strong></p><p>创建策略、列出策略、获取策略详细信息、修改策略、删除策略请求方法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># 创建策略</span></span>
<span class="line"><span>$ curl -s -XPOST -H&#39;Content-Type: application/json&#39; -H&#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2MTc5MjI4OTQsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MTc4MzY0OTQsInN1YiI6ImFkbWluIn0.9qztVJseQ9XwqOFVUHNOtG96-KUovndz0SSr_QBsxAA&#39; -d&#39;{&quot;metadata&quot;:{&quot;name&quot;:&quot;policy0&quot;},&quot;policy&quot;:{&quot;description&quot;:&quot;One policy to rule them all.&quot;,&quot;subjects&quot;:[&quot;users:&lt;peter|ken&gt;&quot;,&quot;users:maria&quot;,&quot;groups:admins&quot;],&quot;actions&quot;:[&quot;delete&quot;,&quot;&lt;create|update&gt;&quot;],&quot;effect&quot;:&quot;allow&quot;,&quot;resources&quot;:[&quot;resources:articles:&lt;.*&gt;&quot;,&quot;resources:printer&quot;],&quot;conditions&quot;:{&quot;remoteIPAddress&quot;:{&quot;type&quot;:&quot;CIDRCondition&quot;,&quot;options&quot;:{&quot;cidr&quot;:&quot;192.168.0.1/16&quot;}}}}}&#39; http://127.0.0.1:8080/v1/policies</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 列出所有策略</span></span>
<span class="line"><span>$ curl -s -XGET -H&#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2MTc5MjI4OTQsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MTc4MzY0OTQsInN1YiI6ImFkbWluIn0.9qztVJseQ9XwqOFVUHNOtG96-KUovndz0SSr_QBsxAA&#39; http://127.0.0.1:8080/v1/policies</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 获取 policy0 策略的详细信息</span></span>
<span class="line"><span>$ curl -s -XGET -H&#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2MTc5MjI4OTQsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MTc4MzY0OTQsInN1YiI6ImFkbWluIn0.9qztVJseQ9XwqOFVUHNOtG96-KUovndz0SSr_QBsxAA&#39; http://127.0.0.1:8080/v1/policies/policy0</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 修改 policy0 策略</span></span>
<span class="line"><span>$ curl -s -XPUT -H&#39;Content-Type: application/json&#39; -H&#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2MTc5MjI4OTQsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MTc4MzY0OTQsInN1YiI6ImFkbWluIn0.9qztVJseQ9XwqOFVUHNOtG96-KUovndz0SSr_QBsxAA&#39; -d&#39;{&quot;metadata&quot;:{&quot;name&quot;:&quot;policy0&quot;},&quot;policy&quot;:{&quot;description&quot;:&quot;One policy to rule them all(modified).&quot;,&quot;subjects&quot;:[&quot;users:&lt;peter|ken&gt;&quot;,&quot;users:maria&quot;,&quot;groups:admins&quot;],&quot;actions&quot;:[&quot;delete&quot;,&quot;&lt;create|update&gt;&quot;],&quot;effect&quot;:&quot;allow&quot;,&quot;resources&quot;:[&quot;resources:articles:&lt;.*&gt;&quot;,&quot;resources:printer&quot;],&quot;conditions&quot;:{&quot;remoteIPAddress&quot;:{&quot;type&quot;:&quot;CIDRCondition&quot;,&quot;options&quot;:{&quot;cidr&quot;:&quot;192.168.0.1/16&quot;}}}}}&#39; http://127.0.0.1:8080/v1/policies/policy0</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 删除 policy0 策略</span></span>
<span class="line"><span>$ curl -s -XDELETE -H&#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2MTc5MjI4OTQsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MTc4MzY0OTQsInN1YiI6ImFkbWluIn0.9qztVJseQ9XwqOFVUHNOtG96-KUovndz0SSr_QBsxAA&#39; http://127.0.0.1:8080/v1/policies/policy0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装-iamctl" tabindex="-1"><a class="header-anchor" href="#安装-iamctl"><span>安装 iamctl</span></a></h3><p>上面，我们安装了 iam 系统的 API 服务。但是想要访问 iam 服务，我们还需要安装客户端工具 iamctl。具体来说，我们可以通过 3 步完成 iamctl 的安装和配置。</p><p><strong>第 1 步，创建 iamctl 证书和私钥。</strong></p><p>iamctl 使用 https 协议与 iam-apiserver 进行安全通信，iam-apiserver 对 iamctl 请求包含的证书进行认证和授权。iamctl 后续用于 iam 系统访问和管理，所以这里创建具有最高权限的 admin 证书。</p><ol><li>创建证书签名请求。</li></ol><p>下面创建的证书只会被 iamctl 当作 client 证书使用，所以 hosts 字段为空。代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ cd $IAM_ROOT</span></span>
<span class="line"><span>$ source scripts/install/environment.sh</span></span>
<span class="line"><span>$ cat &gt; admin-csr.json &lt;&lt;EOF</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;CN&quot;: &quot;admin&quot;,</span></span>
<span class="line"><span>  &quot;key&quot;: {</span></span>
<span class="line"><span>    &quot;algo&quot;: &quot;rsa&quot;,</span></span>
<span class="line"><span>    &quot;size&quot;: 2048</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;names&quot;: [</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>      &quot;C&quot;: &quot;CN&quot;,</span></span>
<span class="line"><span>      &quot;ST&quot;: &quot;BeiJing&quot;,</span></span>
<span class="line"><span>      &quot;L&quot;: &quot;BeiJing&quot;,</span></span>
<span class="line"><span>      &quot;O&quot;: &quot;marmotedu&quot;,</span></span>
<span class="line"><span>      &quot;OU&quot;: &quot;iamctl&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  ],</span></span>
<span class="line"><span>  &quot;hosts&quot;: []</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>EOF</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>生成证书和私钥：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ cfssl gencert -ca=\${IAM_CONFIG_DIR}/cert/ca.pem \\</span></span>
<span class="line"><span>  -ca-key=\${IAM_CONFIG_DIR}/cert/ca-key.pem \\</span></span>
<span class="line"><span>  -config=\${IAM_CONFIG_DIR}/cert/ca-config.json \\</span></span>
<span class="line"><span>  -profile=iam admin-csr.json | cfssljson -bare admin</span></span>
<span class="line"><span>$ mkdir -p $(dirname \${CONFIG_USER_CLIENT_CERTIFICATE}) $(dirname \${CONFIG_USER_CLIENT_KEY}) # 创建客户端证书存放的目录</span></span>
<span class="line"><span>$ mv admin.pem \${CONFIG_USER_CLIENT_CERTIFICATE} # 安装 TLS 的客户端证书</span></span>
<span class="line"><span>$ mv admin-key.pem \${CONFIG_USER_CLIENT_KEY} # 安装 TLS 的客户端私钥文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第 2 步，安装 iamctl。</strong></p><p>iamctl 是 IAM 系统的客户端工具，其安装位置和 iam-apiserver、iam-authz-server、iam-pump 位置不同，为了能够在 shell 下直接运行 iamctl 命令，我们需要将 iamctl 安装到<code>$HOME/bin</code> 下，同时将 iamctl 的配置存放在默认加载的目录下：<code>$HOME/.iam</code>。主要分 2 步进行。</p><ol><li>安装 iamctl 可执行程序：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ cd $IAM_ROOT</span></span>
<span class="line"><span>$ source scripts/install/environment.sh</span></span>
<span class="line"><span>$ make build BINS=iamctl</span></span>
<span class="line"><span>$ cp _output/platforms/linux/amd64/iamctl $HOME/bin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>生成并安装 iamctl 的配置文件（iamctl.yaml）：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ ./scripts/genconfig.sh scripts/install/environment.sh configs/iamctl.yaml&gt; iamctl.yaml</span></span>
<span class="line"><span>$ mkdir -p $HOME/.iam</span></span>
<span class="line"><span>$ mv iamctl.yaml $HOME/.iam</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 iamctl 是一个客户端工具，可能会在多台机器上运行。为了简化部署 iamctl 工具的复杂度，我们可以把 config 配置文件中跟 CA 认证相关的 CA 文件内容用 base64 加密后，放置在 config 配置文件中。具体的思路就是把 config 文件中的配置项 client-certificate、client-key、certificate-authority 分别用如下配置项替换 client-certificate-data、client-key-data、certificate-authority-data。这些配置项的值可以通过对 CA 文件使用 base64 加密获得。</p><p>假如，<code>certificate-authority</code> 值为<code>/etc/iam/cert/ca.pem</code>，则 <code>certificate-authority-data</code> 的值为 <code>cat &quot;/etc/iam/cert/ca.pem&quot; | base64 | tr -d &#39;\\r\\n&#39;</code>，其它<code>-data</code> 变量的值类似。这样当我们再部署 iamctl 工具时，只需要拷贝 iamctl 和配置文件，而不用再拷贝 CA 文件了。</p><p><strong>第 3 步，测试 iamctl 是否成功安装。</strong></p><p>执行 <code>iamctl user list</code> 可以列出预创建的 admin 用户，如下图所示：</p><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="安装和配置-iam-authz-server" tabindex="-1"><a class="header-anchor" href="#安装和配置-iam-authz-server"><span>安装和配置 iam-authz-server</span></a></h3><p>接下来，我们需要安装另外一个核心组件：iam-authz-server，可以通过以下 3 步来安装。</p><p><strong>第 1 步，创建 iam-authz-server 证书和私钥。</strong></p><ol><li>创建证书签名请求：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ cd $IAM_ROOT</span></span>
<span class="line"><span>$ source scripts/install/environment.sh</span></span>
<span class="line"><span>$ tee iam-authz-server-csr.json &lt;&lt;EOF</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;CN&quot;: &quot;iam-authz-server&quot;,</span></span>
<span class="line"><span>  &quot;key&quot;: {</span></span>
<span class="line"><span>    &quot;algo&quot;: &quot;rsa&quot;,</span></span>
<span class="line"><span>    &quot;size&quot;: 2048</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;names&quot;: [</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>      &quot;C&quot;: &quot;CN&quot;,</span></span>
<span class="line"><span>      &quot;ST&quot;: &quot;BeiJing&quot;,</span></span>
<span class="line"><span>      &quot;L&quot;: &quot;BeiJing&quot;,</span></span>
<span class="line"><span>      &quot;O&quot;: &quot;marmotedu&quot;,</span></span>
<span class="line"><span>      &quot;OU&quot;: &quot;iam-authz-server&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  ],</span></span>
<span class="line"><span>  &quot;hosts&quot;: [</span></span>
<span class="line"><span>    &quot;127.0.0.1&quot;,</span></span>
<span class="line"><span>    &quot;localhost&quot;,</span></span>
<span class="line"><span>    &quot;iam.authz.marmotedu.com&quot;</span></span>
<span class="line"><span>  ]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>EOF</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码中的 hosts 字段指定授权使用该证书的 IP 和域名列表，上面的hosts列出了 iam-authz-server 服务的 IP 和域名。</p><ol start="2"><li>生成证书和私钥：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ cfssl gencert -ca=\${IAM_CONFIG_DIR}/cert/ca.pem \\</span></span>
<span class="line"><span>  -ca-key=\${IAM_CONFIG_DIR}/cert/ca-key.pem \\</span></span>
<span class="line"><span>  -config=\${IAM_CONFIG_DIR}/cert/ca-config.json \\</span></span>
<span class="line"><span>  -profile=iam iam-authz-server-csr.json | cfssljson -bare iam-authz-server</span></span>
<span class="line"><span>$ sudo mv iam-authz-server*pem \${IAM_CONFIG_DIR}/cert # 将生成的证书和私钥文件拷贝到配置文件目录</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第 2 步，安装并运行 iam-authz-server。</strong></p><p>安装 iam-authz-server 步骤和安装 iam-apiserver 步骤基本一样，也需要 4 步。</p><ol><li>安装 iam-authz-server 可执行程序：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ cd $IAM_ROOT</span></span>
<span class="line"><span>$ source scripts/install/environment.sh</span></span>
<span class="line"><span>$ make build BINS=iam-authz-server</span></span>
<span class="line"><span>$ sudo cp _output/platforms/linux/amd64/iam-authz-server \${IAM_INSTALL_DIR}/bin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>生成并安装 iam-authz-server 的配置文件（iam-authz-server.yaml）：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ ./scripts/genconfig.sh scripts/install/environment.sh configs/iam-authz-server.yaml &gt; iam-authz-server.yaml</span></span>
<span class="line"><span>$ sudo mv iam-authz-server.yaml \${IAM_CONFIG_DIR}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>创建并安装 iam-authz-server systemd unit 文件：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ ./scripts/genconfig.sh scripts/install/environment.sh init/iam-authz-server.service &gt; iam-authz-server.service</span></span>
<span class="line"><span>$ sudo mv iam-authz-server.service /etc/systemd/system/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>启动 iam-authz-server 服务：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ sudo systemctl daemon-reload</span></span>
<span class="line"><span>$ sudo systemctl enable iam-authz-server</span></span>
<span class="line"><span>$ sudo systemctl restart iam-authz-server</span></span>
<span class="line"><span>$ systemctl status iam-authz-server # 查看 iam-authz-server 运行状态，如果输出中包含 active (running)字样说明 iam-authz-server 成功启动。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第 3 步，测试 iam-authz-server 是否成功安装。</strong></p><ol><li>重新登陆系统，并获取访问令牌</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ token=\`curl -s -XPOST -H&#39;Content-Type: application/json&#39; -d&#39;{&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;Admin@2021&quot;}&#39; http://127.0.0.1:8080/login | jq -r .token\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>创建授权策略</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ curl -s -XPOST -H&quot;Content-Type: application/json&quot; -H&quot;Authorization: Bearer $token&quot; -d&#39;{&quot;metadata&quot;:{&quot;name&quot;:&quot;authztest&quot;},&quot;policy&quot;:{&quot;description&quot;:&quot;One policy to rule them all.&quot;,&quot;subjects&quot;:[&quot;users:&lt;peter|ken&gt;&quot;,&quot;users:maria&quot;,&quot;groups:admins&quot;],&quot;actions&quot;:[&quot;delete&quot;,&quot;&lt;create|update&gt;&quot;],&quot;effect&quot;:&quot;allow&quot;,&quot;resources&quot;:[&quot;resources:articles:&lt;.*&gt;&quot;,&quot;resources:printer&quot;],&quot;conditions&quot;:{&quot;remoteIPAddress&quot;:{&quot;type&quot;:&quot;CIDRCondition&quot;,&quot;options&quot;:{&quot;cidr&quot;:&quot;192.168.0.1/16&quot;}}}}}&#39; http://127.0.0.1:8080/v1/policies</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li>创建密钥，并从命令的输出中提取secretID 和 secretKey</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ curl -s -XPOST -H&quot;Content-Type: application/json&quot; -H&quot;Authorization: Bearer $token&quot; -d&#39;{&quot;metadata&quot;:{&quot;name&quot;:&quot;authztest&quot;},&quot;expires&quot;:0,&quot;description&quot;:&quot;admin secret&quot;}&#39; http://127.0.0.1:8080/v1/secrets</span></span>
<span class="line"><span>{&quot;metadata&quot;:{&quot;id&quot;:23,&quot;name&quot;:&quot;authztest&quot;,&quot;createdAt&quot;:&quot;2021-04-08T07:24:50.071671422+08:00&quot;,&quot;updatedAt&quot;:&quot;2021-04-08T07:24:50.071671422+08:00&quot;},&quot;username&quot;:&quot;admin&quot;,&quot;secretID&quot;:&quot;ZuxvXNfG08BdEMqkTaP41L2DLArlE6Jpqoox&quot;,&quot;secretKey&quot;:&quot;7Sfa5EfAPIwcTLGCfSvqLf0zZGCjF3l8&quot;,&quot;expires&quot;:0,&quot;description&quot;:&quot;admin secret&quot;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>生成访问 iam-authz-server 的 token</li></ol><p>iamctl 提供了 <code>jwt sigin</code> 命令，可以根据 secretID 和 secretKey 签发 Token，方便你使用。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ iamctl jwt sign ZuxvXNfG08BdEMqkTaP41L2DLArlE6Jpqoox 7Sfa5EfAPIwcTLGCfSvqLf0zZGCjF3l8 # iamctl jwt sign $secretID $secretKey，替换成上一步创建的密钥对</span></span>
<span class="line"><span>eyJhbGciOiJIUzI1NiIsImtpZCI6Ilp1eHZYTmZHMDhCZEVNcWtUYVA0MUwyRExBcmxFNkpwcW9veCIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXV0aHoubWFybW90ZWR1LmNvbSIsImV4cCI6MTYxNzg0NTE5NSwiaWF0IjoxNjE3ODM3OTk1LCJpc3MiOiJpYW1jdGwiLCJuYmYiOjE2MTc4Mzc5OTV9.za9yLM7lHVabPAlVQLCqXEaf8sTU6sodAsMXnmpXjMQ</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你的开发过程中有些重复性的操作，为了方便使用，也可以将这些操作以iamctl子命令的方式集成到iamctl命令行中。</p><ol start="5"><li>测试资源授权是否通过</li></ol><p>我们可以通过请求 <code>/v1/authz</code> 来完成资源授权：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ curl -s -XPOST -H&#39;Content-Type: application/json&#39; -H&#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6Ilp1eHZYTmZHMDhCZEVNcWtUYVA0MUwyRExBcmxFNkpwcW9veCIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXV0aHoubWFybW90ZWR1LmNvbSIsImV4cCI6MTYxNzg0NTE5NSwiaWF0IjoxNjE3ODM3OTk1LCJpc3MiOiJpYW1jdGwiLCJuYmYiOjE2MTc4Mzc5OTV9.za9yLM7lHVabPAlVQLCqXEaf8sTU6sodAsMXnmpXjMQ&#39; -d&#39;{&quot;subject&quot;:&quot;users:maria&quot;,&quot;action&quot;:&quot;delete&quot;,&quot;resource&quot;:&quot;resources:articles:ladon-introduction&quot;,&quot;context&quot;:{&quot;remoteIPAddress&quot;:&quot;192.168.0.5&quot;}}&#39; http://127.0.0.1:9090/v1/authz</span></span>
<span class="line"><span>{&quot;allowed&quot;:true}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果授权通过会返回：<code>{&quot;allowed&quot;:true}</code> 。</p><h3 id="安装和配置-iam-pump" tabindex="-1"><a class="header-anchor" href="#安装和配置-iam-pump"><span>安装和配置 iam-pump</span></a></h3><p>安装 iam-pump 步骤和安装 iam-apiserver、iam-authz-server 步骤基本一样，具体步骤如下。</p><p><strong>第 1 步，安装 iam-pump 可执行程序。</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ cd $IAM_ROOT</span></span>
<span class="line"><span>$ source scripts/install/environment.sh</span></span>
<span class="line"><span>$ make build BINS=iam-pump</span></span>
<span class="line"><span>$ sudo cp _output/platforms/linux/amd64/iam-pump \${IAM_INSTALL_DIR}/bin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第 2 步，生成并安装 iam-pump 的配置文件（iam-pump.yaml）。</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ ./scripts/genconfig.sh scripts/install/environment.sh configs/iam-pump.yaml &gt; iam-pump.yaml</span></span>
<span class="line"><span>$ sudo mv iam-pump.yaml \${IAM_CONFIG_DIR}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第 3 步，创建并安装 iam-pump systemd unit 文件。</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ ./scripts/genconfig.sh scripts/install/environment.sh init/iam-pump.service &gt; iam-pump.service</span></span>
<span class="line"><span>$ sudo mv iam-pump.service /etc/systemd/system/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第 4 步，启动 iam-pump 服务。</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ sudo systemctl daemon-reload</span></span>
<span class="line"><span>$ sudo systemctl enable iam-pump</span></span>
<span class="line"><span>$ sudo systemctl restart iam-pump</span></span>
<span class="line"><span>$ systemctl status iam-pump # 查看 iam-pump 运行状态，如果输出中包含 active (running)字样说明 iam-pump 成功启动。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第 5 步，测试 iam-pump 是否成功安装。</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ curl http://127.0.0.1:7070/healthz</span></span>
<span class="line"><span>{&quot;status&quot;: &quot;ok&quot;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>经过上面这 5 个步骤，如果返回 <strong>{&quot;status&quot;: &quot;ok&quot;}</strong> 就说明 iam-pump 服务健康。</p><h2 id="安装-man-文件" tabindex="-1"><a class="header-anchor" href="#安装-man-文件"><span>安装 man 文件</span></a></h2><p>IAM 系统通过组合调用包：<code>github.com/cpuguy83/go-md2man/v2/md2man</code> 和 <code>github.com/spf13/cobra</code> 的相关函数生成了各个组件的 man1 文件，主要分 3 步实现。</p><p><strong>第 1 步，生成各个组件的 man1 文件。</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ cd $IAM_ROOT</span></span>
<span class="line"><span>$ ./scripts/update-generated-docs.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第 2 步，安装生成的 man1 文件。</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ sudo cp docs/man/man1/* /usr/share/man/man1/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>第 3 步，检查是否成功安装 man1 文件。</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ man iam-apiserver</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行 <code>man iam-apiserver</code> 命令后，会弹出 man 文档界面，如下图所示：</p><figure><img src="`+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>至此，IAM 系统所有组件都已经安装成功了，你可以通过 <code>iamctl version</code> 查看客户端和服务端版本，代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ iamctl version -o yaml</span></span>
<span class="line"><span>clientVersion:</span></span>
<span class="line"><span>  buildDate: &quot;2021-04-08T01:56:20Z&quot;</span></span>
<span class="line"><span>  compiler: gc</span></span>
<span class="line"><span>  gitCommit: 1d682b0317396347b568a3ef366c1c54b3b0186b</span></span>
<span class="line"><span>  gitTreeState: dirty</span></span>
<span class="line"><span>  gitVersion: v0.6.1-5-g1d682b0</span></span>
<span class="line"><span>  goVersion: go1.16.2</span></span>
<span class="line"><span>  platform: linux/amd64</span></span>
<span class="line"><span>serverVersion:</span></span>
<span class="line"><span>  buildDate: &quot;2021-04-07T22:30:53Z&quot;</span></span>
<span class="line"><span>  compiler: gc</span></span>
<span class="line"><span>  gitCommit: bde163964b8c004ebb20ca4abd8a2ac0cd1f71ad</span></span>
<span class="line"><span>  gitTreeState: dirty</span></span>
<span class="line"><span>  gitVersion: bde1639</span></span>
<span class="line"><span>  goVersion: go1.16.2</span></span>
<span class="line"><span>  platform: linux/amd64</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>这一讲，我带你一步一步安装了 IAM 应用，完成安装的同时，也希望能加深你对 IAM 应用的理解，并为后面的实战准备好环境。为了更清晰地展示安装流程，这里我把整个安装步骤梳理成了一张脑图，你可以看看。</p><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此外，我还有一点想提醒你，我们今天讲到的所有组件设置的密码都是 <strong>iam59!z$</strong>，你一定要记住啦。</p><h2 id="课后练习" tabindex="-1"><a class="header-anchor" href="#课后练习"><span>课后练习</span></a></h2><p>请你试着调用 iam-apiserver 提供的 API 接口创建一个用户：<code>xuezhang</code>，并在该用户下创建 policy 和 secret 资源。最后调用 iam-authz-server 提供的<code>/v1/authz</code> 接口进行资源鉴权。如果有什么有趣的发现，记得分享出来。</p><p>期待在留言区看到你的尝试，我们下一讲见！</p><hr><h2 id="彩蛋-一键安装" tabindex="-1"><a class="header-anchor" href="#彩蛋-一键安装"><span>彩蛋：一键安装</span></a></h2><p>如果学完了<a href="https://kbchulan.github.io/ClBlogs/excerpts/golang-program/01-golang-program.html" target="_blank" rel="noopener noreferrer">第02讲</a>，你可以直接执行如下脚本，来完成 IAM 系统的安装：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ export LINUX_PASSWORD=&#39;iam59!z$&#39; # 重要：这里要 export going 用户的密码</span></span>
<span class="line"><span>$ version=latest &amp;&amp; curl https://marmotedu-1254073058.cos.ap-beijing.myqcloud.com/iam-release/\${version}/iam.tar.gz | tar -xz -C / tmp/</span></span>
<span class="line"><span>$ cd /tmp/iam/ &amp;&amp; ./scripts/install/install.sh iam::install::install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，你也可以参考 <a href="https://github.com/marmotedu/iam/tree/master/docs/guide/zh-CN/installation/README.md" target="_blank" rel="noopener noreferrer">IAM 部署指南</a> 教程进行安装，这个安装手册可以让你在创建完普通用户后，一键部署整个 IAM 系统，包括实战环境和 IAM 服务。</p>`,206))])}const q=t(m,[["render",v]]),A=JSON.parse('{"path":"/excerpts/golang-program/03-golang-program.html","title":"03 项目部署：如何快速部署 IAM 系统？","lang":"zh-CN","frontmatter":{"title":"03 项目部署：如何快速部署 IAM 系统？","article":true,"order":4,"star":false,"category":["摘录"],"tag":["Go 语言项目开发实战"],"date":"2025-10-16T00:00:00.000Z","footer":"Always coding, always learning","description":"03 项目部署：如何快速部署 IAM 系统？ 你好，我是孔令飞。 上一讲，我们一起安装和配置了一个基本的 Go 开发环境。这一讲，我就来教你怎么在它的基础上，快速部署好 IAM 系统。 因为我们要通过一个 IAM 项目来讲解怎么开发企业级 Go 项目，所以你要对 IAM 项目有比较好的了解，了解 IAM 项目一个最直接有效的方式就是去部署和使用它。 这...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"03 项目部署：如何快速部署 IAM 系统？\\",\\"image\\":[\\"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/3-1.png\\",\\"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/3-2.png\\",\\"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/3-3.jpg\\"],\\"datePublished\\":\\"2025-10-16T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-17T13:30:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KBchulan\\",\\"url\\":\\"https://kbchulan.github.io/ClBlogs/\\"}]}"],["meta",{"property":"og:url","content":"https://kbchulan.github.io/ClBlogs/ClBlogs/excerpts/golang-program/03-golang-program.html"}],["meta",{"property":"og:site_name","content":"KBchulan的博客"}],["meta",{"property":"og:title","content":"03 项目部署：如何快速部署 IAM 系统？"}],["meta",{"property":"og:description","content":"03 项目部署：如何快速部署 IAM 系统？ 你好，我是孔令飞。 上一讲，我们一起安装和配置了一个基本的 Go 开发环境。这一讲，我就来教你怎么在它的基础上，快速部署好 IAM 系统。 因为我们要通过一个 IAM 项目来讲解怎么开发企业级 Go 项目，所以你要对 IAM 项目有比较好的了解，了解 IAM 项目一个最直接有效的方式就是去部署和使用它。 这..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/3-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-17T13:30:28.000Z"}],["meta",{"property":"article:tag","content":"Go 语言项目开发实战"}],["meta",{"property":"article:published_time","content":"2025-10-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-17T13:30:28.000Z"}]]},"git":{"createdTime":1760707828000,"updatedTime":1760707828000,"contributors":[{"name":"KBchulan","username":"KBchulan","email":"18737519552@163.com","commits":1,"url":"https://github.com/KBchulan"}]},"readingTime":{"minutes":23.1,"words":6930},"filePathRelative":"excerpts/golang-program/03-golang-program.md","excerpt":"","autoDesc":true}');export{q as comp,A as data};
