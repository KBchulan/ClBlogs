import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,a as l,o as e}from"./app-DAR_yeCm.js";const t={};function h(p,s){return e(),a("div",null,[n(" more "),s[0]||(s[0]=l(`<h1 id="_20-grpc框架介绍" tabindex="-1"><a class="header-anchor" href="#_20-grpc框架介绍"><span>20 gRPC框架介绍</span></a></h1><p>在前后端通信以及分布式服务器通信中，我们通常使用 json、xml、二进制数据等方式进行数据传输，相应的，我们会使用一些常见的 API 架构，便于交互双方容易从这些数据中解析出需要的数据，此处我们先介绍一下常见的API架构。</p><h2 id="api架构介绍" tabindex="-1"><a class="header-anchor" href="#api架构介绍"><span>API架构介绍</span></a></h2><p>本处我们介绍的只是各个 API 架构的场景和应用方式，本节我们只会展开对gRPC的使用介绍。</p><h3 id="基于http的标准化api架构" tabindex="-1"><a class="header-anchor" href="#基于http的标准化api架构"><span>基于HTTP的标准化API架构</span></a></h3><ul><li><p><strong>RESTful API (Representational State Transfer)</strong></p><ul><li><strong>描述</strong>：一种基于HTTP协议的架构风格，将网络中的每个资源都看作是一个可以通过统一接口访问的对象，REST强调无状态、可缓存、统一接口等约束条件。</li><li><strong>特点</strong>： <ul><li>数据格式：主要使用JSON，也支持XML。</li><li>通信方式：请求-响应模式，无状态。</li><li>HTTP方法：GET（获取）、POST（创建）、PUT（更新）、DELETE（删除）、PATCH（部分更新）。</li><li>优点：简单易懂、标准化程度高、缓存友好、可扩展性好。</li><li>缺点：可能存在over-fetching（获取多余数据）或under-fetching（数据不足需要多次请求）问题。</li></ul></li><li><strong>使用场景</strong>：Web应用、移动应用、公开API服务，是目前最主流的API架构风格。</li></ul></li><li><p><strong>GraphQL</strong></p><ul><li><strong>描述</strong>：由Facebook开发的查询语言和运行时，允许客户端精确指定需要的数据结构。与REST不同，GraphQL只有一个端点，客户端通过查询语句描述所需数据。</li><li><strong>特点</strong>： <ul><li>数据格式：JSON。</li><li>通信方式：客户端驱动的查询，通常使用POST请求。</li><li>优点：避免over-fetching和under-fetching、强类型系统、实时订阅。</li><li>缺点：学习曲线较陡、缓存复杂、查询复杂度控制困难。</li></ul></li><li><strong>使用场景</strong>：复杂的前端应用、移动应用、需要灵活数据获取的场景。</li></ul></li></ul><h3 id="基于远程过程调用的风格" tabindex="-1"><a class="header-anchor" href="#基于远程过程调用的风格"><span>基于远程过程调用的风格</span></a></h3><p>gRPC 是 RPC 的现代实现，但这个概念本身很早就有了。</p><ul><li><p><strong>JSON-RPC</strong></p><ul><li><strong>描述</strong>：一个非常轻量级的远程过程调用协议，它规定了调用的数据结构（使用 JSON），但对应用层没有限制（通常使用 HTTP）。</li><li><strong>特点</strong>： <ul><li>数据格式：JSON。</li><li>通信方式：请求-响应。</li><li>优点：极其简单，规范清晰，跨语言支持好。</li><li>缺点：功能集非常有限，没有内置的服务发现、类型安全等高级功能。</li></ul></li><li><strong>使用场景</strong>：简单的内部服务通信、需要快速实现且功能要求不高的场景。</li></ul></li><li><p><strong>XML-RPC</strong></p><ul><li><strong>描述</strong>：JSON-RPC 的前身，使用 XML 作为编码格式，它是 SOAP 协议的早期简化版本。</li><li><strong>特点</strong>： <ul><li>数据格式：XML。</li><li>优点：比 SOAP 简单。</li><li>缺点：相比 JSON-RPC，XML 更冗长，解析更慢。</li></ul></li><li><strong>使用场景</strong>：维护一些非常古老的遗留系统，新的项目就不要用了吧，还是用 grpc 比较好。</li></ul></li></ul><h3 id="面向传统企业和遗留系统" tabindex="-1"><a class="header-anchor" href="#面向传统企业和遗留系统"><span>面向传统企业和遗留系统</span></a></h3><ul><li><strong>SOAP (Simple Object Access Protocol)</strong><ul><li><strong>描述</strong>：一个非常严格、基于 XML 的协议，曾经是 Web 服务的主流标准，它拥有许多扩展如 WS-Security（安全）、WS-Transaction（事务）等。</li><li><strong>特点</strong>： <ul><li>数据格式：XML。</li><li>通信方式：请求-响应，但协议本身非常复杂。</li><li>优点：标准化程度高，有严格的契约（通过 WSDL 文件定义），内置了安全、事务、寻址等企业级功能。</li><li>缺点：极其冗长，性能差，配置和使用复杂。</li></ul></li><li><strong>使用场景</strong>：银行、金融、保险等需要高安全性和事务一致性的传统企业级应用，以及与旧系统集成。</li></ul></li></ul><h3 id="事件驱动和实时通信架构" tabindex="-1"><a class="header-anchor" href="#事件驱动和实时通信架构"><span>事件驱动和实时通信架构</span></a></h3><p>这类架构与请求-响应模型有根本不同，它们更关注“事件”和“消息”。</p><ul><li><p><strong>WebSockets</strong></p><ul><li><strong>描述</strong>：一种在单个 TCP 连接上进行全双工（full-duplex）通信的协议，连接一旦建立，客户端和服务器可以随时互相发送数据，无需每次都发起新的 HTTP 请求。</li><li><strong>特点</strong>： <ul><li>通信方式：持久化、双向实时通信。</li><li>优点：低延迟，开销小，非常适合实时应用。</li><li>缺点：管理连接状态比无状态的 REST 更复杂。</li></ul></li><li><strong>使用场景</strong>：在线聊天室、实时数据看板、在线协作工具（如 Google Docs）、多人在线游戏。</li></ul></li><li><p><strong>Webhooks (也称为“反向 API”)</strong></p><ul><li><strong>描述</strong>：一种事件驱动的模式，当某个事件在服务器端发生时，由服务器主动向客户端预先配置的 URL 发送一个 HTTP POST 请求来通知它。</li><li><strong>特点</strong>： <ul><li>通信方式：事件驱动的单向推送（Server -&gt; Client）。</li><li>优点：实时性好，避免了客户端不断轮询来检查状态，节省资源。</li><li>缺点：需要客户端暴露一个公网可访问的端点，且需要处理失败重试、安全验证等问题。</li></ul></li><li><strong>使用场景</strong>：CI/CD 流程（如 GitHub 在代码 push 后通知 Jenkins 构建）、支付网关（如 Stripe 在支付成功后通知商城）、第三方应用集成。</li></ul></li><li><p><strong>消息队列 (Message Queues)</strong></p><ul><li><strong>描述</strong>：这不是一个单一的协议，而是一类架构模式，服务之间不直接通信，而是通过一个中间件（消息代理，如 RabbitMQ, Kafka, ActiveMQ）来传递消息：生产者将消息放入队列，消费者从队列中取出并处理。</li><li><strong>常见协议</strong>： <ul><li><strong>AMQP (Advanced Message Queuing Protocol)</strong>：一个功能丰富的协议，支持多种消息模式（如点对点、发布/订阅），提供可靠的消息传递。</li><li><strong>MQTT (Message Queuing Telemetry Transport)</strong>：一个极其轻量级的发布/订阅协议，专为低带宽、不稳定的网络环境设计。</li></ul></li><li><strong>特点</strong>： <ul><li>通信方式：异步、解耦。</li><li>优点：系统解耦、削峰填谷、异步处理、提高系统弹性和可伸缩性。</li><li>缺点：增加了系统复杂度和运维成本（需要维护消息中间件）。</li></ul></li><li><strong>使用场景</strong>： <ul><li><strong>AMQP</strong>: 复杂的企业级后台任务处理、金融系统。</li><li><strong>MQTT</strong>: 物联网（IoT）设备通信、移动消息推送。</li></ul></li></ul></li></ul><h2 id="grpc简介" tabindex="-1"><a class="header-anchor" href="#grpc简介"><span>gRPC简介</span></a></h2><p>gRPC是google开发的一个RPC框架，它可以让我们像调用本服务的一个函数一样调用远程的服务端点，采用 protobuf 作为消息格式，这样就可以生成不同语言的一个文件，我们把这些文件放在对于项目里，采用proto中定义的rpc格式进行传递即可调用到其他的服务。</p><p>因此核心在于proto的设计，这个在<a href="https://kbchulan.github.io/ClBlogs/blogs-main/asio/10-asio.html#proto%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener noreferrer">protobuf序列化</a>中已经介绍过了，可以去再回顾一下。</p><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><p>依旧是打开msys2终端，输入如下命令即可安装：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pacman</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -S</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mingw-w64-ucrt-x86_64-grpc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h3><p>下面我们从一个简单的 proto 文件开始，逐步展示如何生成代码、构建并运行一个 gRPC 的服务端和客户端。</p><h4 id="定义服务" tabindex="-1"><a class="header-anchor" href="#定义服务"><span>定义服务</span></a></h4><p>首先，我们需要创建一个 <code>.proto</code> 文件来定义我们的服务，具体写法依旧可以参考<a href="https://kbchulan.github.io/ClBlogs/blogs-main/asio/10-asio.html#service" target="_blank" rel="noopener noreferrer">先前介绍</a>。</p><p><strong>demo.proto</strong></p><div class="language-proto line-numbers-mode" data-highlighter="shiki" data-ext="proto" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-proto"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">syntax</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;proto3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">message</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HelloRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  string</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> req</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">message</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HelloResponse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  string</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> rsp</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">service</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HelloEndpoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  rpc</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SayHello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HelloRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">returns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HelloResponse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="生成代码" tabindex="-1"><a class="header-anchor" href="#生成代码"><span>生成代码</span></a></h4><p>打开msys2终端，如果配置了path，打开ps也可以，执行如下命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># --cpp_out=. 指定生成 protobuf C++ 代码的目录</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># --grpc_out=. 指定生成 gRPC C++ 代码的目录</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># --plugin=protoc-gen-grpc=... 指定 gRPC C++ 插件的位置</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">protoc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./demo.proto</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --cpp_out=.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --grpc_out=.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --plugin=protoc-gen-grpc=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;C:\\msys64\\ucrt64\\bin\\grpc_cpp_plugin.exe&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行成功后，你会得到四个文件：</p><ul><li><strong>demo.pb.h</strong> 、<strong>demo.pb.cpp</strong> ：包含了 protobuf 消息的 C++ 类，负责消息的序列化和反序列化。</li><li><strong>demo.grpc.pb.h</strong> 、<strong>demo.grpc.pb.cpp</strong>：包含了 gRPC 的客户端和服务端代码。 <ul><li><strong>服务端</strong>：一个抽象基类 <code>HelloEndpoint::Service</code>，里面将proto的rpc方法表达为虚函数，我们需要继承它并实现此函数。</li><li><strong>客户端</strong>：一个名为 <code>HelloEndpoint::Stub</code> 的类（通常称为存根），客户端通过它来调用服务端的rpc方法。</li></ul></li></ul><h4 id="grpc服务端" tabindex="-1"><a class="header-anchor" href="#grpc服务端"><span>grpc服务端</span></a></h4><p>现在我们来编写服务端代码。服务端的职责是：</p><ol><li>实现 <code>HelloEndpoint::Service</code> 接口中定义的业务逻辑。</li><li>启动一个 gRPC 服务器，监听来自客户端的请求。</li></ol><p><strong>server.cpp</strong></p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;demo.grpc.pb.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;grpcpp/grpcpp.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;grpcpp/support/status.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;grpcpp/security/server_credentials.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;print&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;memory&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DemoServiceImpl</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> hello::HelloEndpoint::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 实现此虚函数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  grpc::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Status</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SayHello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(grpc::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ServerContext</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> hello::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HelloRequest</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, hello::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HelloResponse</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set_rsp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Server1 response: &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">req</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> grpc::Status::OK;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> startServer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  std::string </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">server_address</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.0.0.0:50051&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 创建builder，配置选项</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  grpc::ServerBuilder builder;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AddListeningPort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(server_address, grpc::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">InsecureServerCredentials</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 不需要校验</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 注册服务</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  DemoServiceImpl service;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RegisterService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">service);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 创建一个服务</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  std::unique_ptr</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">grpc::Server</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">BuildAndStart</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  std::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Server listening on {}</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, server_address);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Wait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  startServer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="grpc客户端" tabindex="-1"><a class="header-anchor" href="#grpc客户端"><span>grpc客户端</span></a></h4><p>客户端的职责是连接到 gRPC 服务器，并像调用本地函数一样调用远程方法。</p><p><strong>client.cpp</strong></p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;demo.grpc.pb.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;demo.pb.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;grpcpp/channel.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;grpcpp/create_channel.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;grpcpp/grpcpp.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;grpcpp/support/status.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;memory&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DemoClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  DemoClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(std::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">shared_ptr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;grpc::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Channel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">channel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    : </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">_stub</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">HelloEndpoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">NewStub</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(channel)) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  std::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SayHello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    hello::HelloRequest request;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set_req</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 响应对象</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    hello::HelloResponse response;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 创建上下文</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    grpc::ClientContext context;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 调用远程方法</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    grpc::Status status </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> _stub</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SayHello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">context, request, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">response);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ok</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rsp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      std::cerr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;RPC failed: &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">error_message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  std::unique_ptr</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">hello::HelloEndpoint::Stub</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _stub;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RunClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 创建 rpc 通道</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> channel </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> grpc::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CreateChannel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;localhost:50051&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, grpc::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">InsecureChannelCredentials</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 创建客户端</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  DemoClient </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(channel);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  std::string reply </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SayHello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;chulan&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">reply</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Server replied: &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> reply </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Failed to get a valid response from server.&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  RunClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>补充一下这个stub的认知，当我们通过 stub 调用远程方法时，gRPC 库在底层将你的请求序列化成 protobuf 格式，通过 HTTP/2 发送给服务器，然后接收响应并反序列化，最后将结果返回给客户端，但是对我们使用上来说，基本是无感知的调用本地函数的感觉。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>由于grpc库采用的是二进制数据传输，因此它的性能是极快的，但是如果是多个连接，我们需要在服务器这边处理并发，有的时候又不如传统的restful，整体来说，这是一个非常优秀的API架构，如果需要高性能、分布式服务时可以优先考虑使用这个。</p><p>本节代码详见<a href="https://github.com/KBchulan/ClBlogs-Src/blob/main/blogs-main/asio/20-grpc/server1/server1.cc" target="_blank" rel="noopener noreferrer">此处</a>。</p>`,44))])}const d=i(t,[["render",h]]),g=JSON.parse('{"path":"/blogs-main/asio/20-asio.html","title":"20 gRPC框架介绍","lang":"zh-CN","frontmatter":{"title":"20 gRPC框架介绍","article":true,"order":20,"star":true,"category":["网络"],"tag":["asio"],"date":"2025-08-03T00:00:00.000Z","description":"介绍常用的API框架，并给出gRPC的基本使用","footer":"Always coding, always learning","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"20 gRPC框架介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-03T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-03T03:36:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KBchulan\\",\\"url\\":\\"https://kbchulan.github.io/ClBlogs/\\"}]}"],["meta",{"property":"og:url","content":"https://kbchulan.github.io/ClBlogs/ClBlogs/blogs-main/asio/20-asio.html"}],["meta",{"property":"og:site_name","content":"KBchulan的博客"}],["meta",{"property":"og:title","content":"20 gRPC框架介绍"}],["meta",{"property":"og:description","content":"介绍常用的API框架，并给出gRPC的基本使用"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-03T03:36:38.000Z"}],["meta",{"property":"article:tag","content":"asio"}],["meta",{"property":"article:published_time","content":"2025-08-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-03T03:36:38.000Z"}]]},"git":{"createdTime":1754192198000,"updatedTime":1754192198000,"contributors":[{"name":"KBchulan","username":"KBchulan","email":"145010602+KBchulan@users.noreply.github.com","commits":1,"url":"https://github.com/KBchulan"}]},"readingTime":{"minutes":8.79,"words":2636},"filePathRelative":"blogs-main/asio/20-asio.md","excerpt":""}');export{d as comp,g as data};
