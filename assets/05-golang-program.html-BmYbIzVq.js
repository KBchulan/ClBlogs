import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as i,o as n}from"./app-BE9g2F5B.js";const l="/ClBlogs/assets/pages/golang-program/5-1.png",t="/ClBlogs/assets/pages/golang-program/5-2.png",p="/ClBlogs/assets/pages/golang-program/5-3.png",o="/ClBlogs/assets/pages/golang-program/5-4.png",d="/ClBlogs/assets/pages/golang-program/5-5.png",c="/ClBlogs/assets/pages/golang-program/5-6.png",r="/ClBlogs/assets/pages/golang-program/5-7.png",m="/ClBlogs/assets/pages/golang-program/5-8.png",g="/ClBlogs/assets/pages/golang-program/5-9.png",h="/ClBlogs/assets/pages/golang-program/5-10.png",u="/ClBlogs/assets/pages/golang-program/5-11.png",b="/ClBlogs/assets/pages/golang-program/5-12.png",v="/ClBlogs/assets/pages/golang-program/5-13.png",k={};function f(A,s){return n(),a("div",null,s[0]||(s[0]=[i('<h1 id="_05-规范设计-下-commit-信息风格迥异、难以阅读-如何规范" tabindex="-1"><a class="header-anchor" href="#_05-规范设计-下-commit-信息风格迥异、难以阅读-如何规范"><span>05 规范设计（下）：commit 信息风格迥异、难以阅读，如何规范？</span></a></h1><p>你好，我是孔令飞。今天，我们继续学习非编码类规范中的 Commit 规范。</p><p>我们在做代码开发时，经常需要提交代码，提交代码时需要填写 Commit Message（提交说明），否则就不允许提交。</p><p>而在实际开发中，我发现每个研发人员提交 Commit Message 的格式可以说是五花八门，有用中文的、有用英文的，甚至有的直接填写“11111”。这样的 Commit Message，时间久了可能连提交者自己都看不懂所表述的修改内容，更别说给别人看了。</p><p>所以在 Go 项目开发时，一个好的 Commit Message 至关重要：</p><ul><li>可以使自己或者其他开发人员能够<strong>清晰地知道每个 commit 的变更内容</strong>，方便快速浏览变更历史，比如可以直接略过文档类型或者格式化类型的代码变更。</li><li>可以基于这些 Commit Message <strong>进行过滤查找</strong>，比如只查找某个版本新增的功能：<code>git log --oneline --grep &quot;^feat|^fix|^perf&quot;</code>。</li><li>可以基于规范化的 Commit Message <strong>生成 Change Log</strong>。</li><li>可以依据某些类型的 Commit Message <strong>触发构建或者发布流程</strong>，比如当 type 类型为 feat、fix 时我们才触发 CI 流程。</li><li><strong>确定语义化版本的版本号</strong>。比如 <code>fix</code> 类型可以映射为 PATCH 版本，<code>feat</code> 类型可以映射为 MINOR 版本。带有 <code>BREAKING CHANGE</code> 的 commit，可以映射为 MAJOR 版本。在这门课里，我就是通过这种方式来自动生成版本号。</li></ul><p>总结来说，一个好的 Commit Message 规范可以使 Commit Message 的可读性更好，并且可以实现自动化。那究竟如何写一个易读的 Commit Message 呢？</p><p>接下来，我们来看下如何规范 Commit Message。另外，除了 Commit Message 之外，我还会介绍跟 Commit 相关的 3 个重点，以及如何通过自动化流程来保证 Commit Message 的规范化。</p><h2 id="commit-message-的规范有哪些" tabindex="-1"><a class="header-anchor" href="#commit-message-的规范有哪些"><span>Commit Message 的规范有哪些？</span></a></h2><p>毫无疑问，我们可以根据需要自己来制定 Commit Message 规范，但是我更建议你采用开源社区中比较成熟的规范。一方面，可以避免重复造轮子，提高工作效率。另一方面，这些规范是经过大量开发者验证的，是科学、合理的。</p><p>目前，社区有多种 Commit Message 的规范，例如 jQuery、Angular 等。我将这些规范及其格式绘制成下面一张图片，供你参考：</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在这些规范中，Angular 规范在功能上能够满足开发者 commit 需求，在格式上清晰易读，目前也是用得最多的。</p><p>Angular 规范其实是一种语义化的提交规范（Semantic Commit Messages），所谓语义化的提交规范包含以下内容：</p><ul><li>Commit Message 是语义化的：Commit Message 都会被归为一个有意义的类型，用来说明本次 commit 的类型。</li><li>Commit Message 是规范化的：Commit Message 遵循预先定义好的规范，比如 Commit Message 格式固定、都属于某个类型，这些规范不仅可被开发者识别也可以被工具识别。</li></ul><p>为了方便你理解 Angular 规范，我们直接看一个遵循 Angular 规范的 commit 历史记录，见下图：</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>再来看一个完整的符合 Angular 规范的 Commit Message，如下图所示：</p><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过上面 2 张图，我们可以看到符合 Angular Commit Message 规范的 commit 都是有一定格式，有一定语义的。</p><p>那我们该<strong>怎么写出符合 Angular 规范的 Commit Message 呢</strong>？</p><p>在 Angular 规范中，Commit Message 包含三个部分，分别是 <strong>Header</strong>、<strong>Body</strong> 和 <strong>Footer</strong>，格式如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>&lt;type&gt;[optional scope]: &lt;description&gt;</span></span>
<span class="line"><span>// 空行</span></span>
<span class="line"><span>[optional body]</span></span>
<span class="line"><span>// 空行</span></span>
<span class="line"><span>[optional footer(s)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，Header是必需的，Body和Footer可以省略。在以上规范中，<code>&lt;scope&gt;</code>必须用括号 <code>()</code> 括起来， <code>&lt;type&gt;[&lt;scope&gt;]</code> 后必须紧跟冒号 ，冒号后必须紧跟空格，2 个空行也是必需的。</p><p>在实际开发中，为了使 Commit Message 在 GitHub 或者其他 Git 工具上更加易读，我们往往会限制每行 message 的长度。根据需要，可以限制为 50/72/100 个字符，这里我将长度限制在 72 个字符以内（也有一些开发者会将长度限制为 100，你可根据需要自行选择）。</p><p>以下是一个符合 Angular 规范的 Commit Message：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>fix($compile): couple of unit tests for IE9</span></span>
<span class="line"><span># Please enter the Commit Message for your changes. Lines starting</span></span>
<span class="line"><span># with &#39;#&#39; will be ignored, and an empty message aborts the commit.</span></span>
<span class="line"><span># On branch master</span></span>
<span class="line"><span># Changes to be committed:</span></span>
<span class="line"><span># ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Older IEs serialize html uppercased, but IE9 does not...</span></span>
<span class="line"><span>Would be better to expect case insensitive, unfortunately jasmine does</span></span>
<span class="line"><span>not allow to user regexps for throw expectations.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Closes #392</span></span>
<span class="line"><span>Breaks foo.bar api, foo.baz should be used instead</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们详细看看 Angular 规范中 Commit Message 的三个部分。</p><h3 id="header" tabindex="-1"><a class="header-anchor" href="#header"><span>Header</span></a></h3><p>Header 部分只有一行，包括三个字段：type（必选）、scope（可选）和 subject（必选）。</p><p>我们先来说 <strong>type</strong>，它用来说明 commit 的类型。为了方便记忆，我把这些类型做了归纳，它们主要可以归为 Development 和 Production 共两类。它们的含义是：</p><ul><li>Development：这类修改一般是项目管理类的变更，不会影响最终用户和生产环境的代码，比如 CI 流程、构建方式等的修改。遇到这类修改，通常也意味着可以免测发布。</li><li>Production：这类修改会影响最终的用户和生产环境的代码。所以对于这种改动，我们一定要慎重，并在提交前做好充分的测试。</li></ul><p>我在这里列出了 Angular 规范中的常见 type 和它们所属的类别，你在提交 Commit Message 的时候，一定要注意区分它的类别。举个例子，我们在做 Code Review 时，如果遇到 Production 类型的代码，一定要认真 Review，因为这种类型，会影响到现网用户的使用和现网应用的功能。</p><figure><img src="`+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>有这么多 type，我们该如何确定一个 commit 所属的 type 呢？这里我们可以通过下面这张图来确定。</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果我们变更了应用代码，比如某个 Go 函数代码，那这次修改属于代码类。在代码类中，有 4 种具有明确变更意图的类型：feat、fix、perf 和 style；如果我们的代码变更不属于这 4 类，那就全都归为 refactor 类，也就是优化代码。</p><p>如果我们变更了非应用代码，例如更改了文档，那它属于非代码类。在非代码类中，有 3 种具有明确变更意图的类型：test、ci、docs；如果我们的非代码变更不属于这 3 类，那就全部归入到 chore 类。</p><p>Angular 的 Commit Message 规范提供了大部分的 type，在实际开发中，我们可以使用部分 type，或者扩展添加我们自己的 type。但无论选择哪种方式，<strong>我们一定要保证一个项目中的 type 类型一致。</strong></p><p>接下来，我们说说 Header 的第二个字段 <strong>scope</strong>。</p><p>scope 是用来说明 commit 的影响范围的，它必须是名词。显然，不同项目会有不同的 scope。在项目初期，我们可以设置一些粒度比较大的 scope，比如可以按组件名或者功能来设置 scope；后续，如果项目有变动或者有新功能，我们可以再用追加的方式添加新的 scope。</p><p>我们这门课采用的 scope，主要是根据组件名和功能来设置的。例如，支持 apiserver、authzserver、user 这些 scope。</p><p><strong>这里想强调的是，scope 不适合设置太具体的值</strong>。太具体的话，一方面会导致项目有太多的 scope，难以维护。另一方面，开发者也难以确定 commit 属于哪个具体的 scope，导致错放 scope，反而会使 scope 失去了分类的意义。</p><p>当然了，在指定 scope 时，也需要遵循我们预先规划的 scope，所以我们要将 scope 文档化，放在类似 devel 这类文档中。这一点你可以参考下 IAM 项目的 scope 文档： <a href="https://github.com/marmotedu/iam/blob/master/docs/devel/zh-CN/scope.md" target="_blank" rel="noopener noreferrer">IAM commit message scope</a> 。</p><p>最后，我们再说说 <strong>subject。</strong></p><p>subject 是 commit 的简短描述，必须以动词开头、使用现在时。比如，我们可以用 change，却不能用 changed 或 changes，而且这个动词的第一个字母必须是小写。通过这个动词，我们可以明确地知道 commit 所执行的操作。此外我们还要注意，subject 的结尾不能加英文句号。</p><h3 id="body" tabindex="-1"><a class="header-anchor" href="#body"><span>Body</span></a></h3><p>Header 对 commit 做了高度概括，可以方便我们查看 Commit Message。那我们如何知道具体做了哪些变更呢？答案就是，可以通过 Body 部分，它是对本次 commit 的更详细描述，是可选的。</p><p>Body 部分可以分成多行，而且格式也比较自由。不过，和 Header 里的 一样，它也要以动词开头，使用现在时。此外，它还必须 <strong>要包括修改的动机</strong>，以及 <strong>和跟上一版本相比的改动点</strong>。</p><p>我在下面给出了一个范例，你可以看看：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>The body is mandatory for all commits except for those of scope &quot;docs&quot;. When the body is required it must be at least 20 characters long.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="footer" tabindex="-1"><a class="header-anchor" href="#footer"><span>Footer</span></a></h3><p>Footer 部分不是必选的，可以根据需要来选择，主要用来说明本次 commit 导致的后果。在实际应用中，Footer 通常用来说明不兼容的改动和关闭的 Issue 列表，格式如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>BREAKING CHANGE: &lt;breaking change summary&gt;</span></span>
<span class="line"><span>// 空行</span></span>
<span class="line"><span>&lt;breaking change description + migration instructions&gt;</span></span>
<span class="line"><span>// 空行</span></span>
<span class="line"><span>// 空行</span></span>
<span class="line"><span>Fixes #&lt;issue number&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我给你详细说明下这两种情况：</p><ul><li>不兼容的改动：如果当前代码跟上一个版本不兼容，需要在 Footer 部分，以 <code>BREAKING CHANG:</code> 开头，后面跟上不兼容改动的摘要。Footer 的其他部分需要说明变动的描述、变动的理由和迁移方法，例如：</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>BREAKING CHANGE: isolate scope bindings definition has changed and</span></span>
<span class="line"><span>    the inject option for the directive controller injection was removed.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    To migrate the code follow the example below:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Before:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    scope: {</span></span>
<span class="line"><span>      myAttr: &#39;attribute&#39;,</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    After:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    scope: {</span></span>
<span class="line"><span>      myAttr: &#39;@&#39;,</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    The removed \`inject\` wasn&#39;t generaly useful for directives so there should be no code using it.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>关闭的 Issue 列表：关闭的 Bug 需要在 Footer 部分新建一行，并以 Closes 开头列出，例如：<code>Closes #123</code>。如果关闭了多个 Issue，可以这样列出：<code>Closes #123, #432, #886</code>。例如:</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span> Change pause version value to a constant for image</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Closes #1137</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="revert-commit" tabindex="-1"><a class="header-anchor" href="#revert-commit"><span>Revert Commit</span></a></h3><p>除了 <strong>Header</strong>、<strong>Body</strong> 和 <strong>Footer 这 3 个部分，</strong> Commit Message 还有一种特殊情况：如果当前 commit 还原了先前的 commit，则应以 <code>revert:</code> 开头，后跟还原的 commit 的 Header。而且，在 Body 中必须写成 <code>This reverts commit &lt;hash&gt;</code> ，其中 hash 是要还原的 commit 的 SHA 标识。例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>revert: feat(iam-apiserver): add &#39;Host&#39; option</span></span>
<span class="line"><span></span></span>
<span class="line"><span>This reverts commit 079360c7cfc830ea8a6e13f4c8b8114febc9b48a.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了更好地遵循 Angular 规范，建议你在提交代码时养成不用 <code>git commit -m</code>，即不用-m 选项的习惯，而是直接用 <code>git commit</code> 或者 <code>git commit -a</code> 进入交互界面编辑 Commit Message。这样可以更好地格式化 Commit Message。</p><p>但是除了 Commit Message 规范之外，在代码提交时，我们还需要关注 3 个重点内容：提交频率、合并提交和 Commit Message 修改。</p><h2 id="commit-相关的-3-个重要内容" tabindex="-1"><a class="header-anchor" href="#commit-相关的-3-个重要内容"><span>Commit 相关的 3 个重要内容</span></a></h2><p>我们先来看下提交频率。</p><h3 id="提交频率" tabindex="-1"><a class="header-anchor" href="#提交频率"><span>提交频率</span></a></h3><p>在实际项目开发中，如果是个人项目，随意 commit 可能影响不大，但如果是多人开发的项目，随意 commit 不仅会让 Commit Message 变得难以理解，还会让其他研发同事觉得你不专业。因此，我们要规定 commit 的提交频率。</p><p>那到底什么时候进行 commit 最好呢？</p><p>我认为主要可以分成两种情况。一种情况是，只要我对项目进行了修改，一通过测试就立即 commit。比如修复完一个 bug、开发完一个小功能，或者开发完一个完整的功能，测试通过后就提交。另一种情况是，我们规定一个时间，定期提交。这里我建议代码下班前固定提交一次，并且要确保本地未提交的代码，延期不超过 1 天。这样，如果本地代码丢失，可以尽可能减少丢失的代码量。</p><p>按照上面 2 种方式提交代码，你可能会觉得代码 commit 比较多，看起来比较随意。或者说，我们想等开发完一个完整的功能之后，放在一个 commit 中一起提交。这时候，我们可以在最后合并代码或者提交 Pull Request 前，执行 <code>git rebase -i</code> 合并之前的所有 commit。</p><p>那么如何合并 commit 呢？接下来，我来详细说说。</p><h3 id="合并提交" tabindex="-1"><a class="header-anchor" href="#合并提交"><span>合并提交</span></a></h3><p>合并提交，就是将多个 commit 合并为一个 commit 提交。这里，我建议你把新的 commit 合并到主干时，只保留 2~3 个 commit 记录。那具体怎么做呢？</p><p>在 Git 中，我们主要使用 git rebase 命令来合并。git rebase 也是我们日后开发需要经常使用的一个命令，所以我们一定要掌握好它的使用方法。</p><p><strong>git rebase 命令介绍</strong></p><p>git rebase 的最大作用是它可以重写历史。</p><p>我们通常会通过 <code>git rebase -i &lt;commit ID&gt;</code>使用 git rebase 命令，<code>-i</code> 参数表示交互（interactive），该命令会进入到一个交互界面中，其实就是 Vim 编辑器。在该界面中，我们可以对里面的 commit 做一些操作，交互界面如图所示：</p><figure><img src="`+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个交互界面会首先列出给定<code>&lt;commit ID&gt;</code>之前（不包括 ，越下面越新）的所有 commit，每个 commit 前面有一个操作命令，默认是 pick。我们可以选择不同的 commit，并修改 commit 前面的命令，来对该 commit 执行不同的变更操作。</p><p>git rebase 支持的变更操作如下：</p><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在上面的 7 个命令中，squash 和 fixup 可以用来合并 commit。例如用 squash 来合并，我们只需要把要合并的 commit 前面的动词，改成 squash（或者 s）即可。你可以看看下面的示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>pick 07c5abd Introduce OpenPGP and teach basic usage</span></span>
<span class="line"><span>s de9b1eb Fix PostChecker::Post#urls</span></span>
<span class="line"><span>s 3e7ee36 Hey kids, stop all the highlighting</span></span>
<span class="line"><span>pick fa20af3 git interactive rebase, squash, amend</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rebase 后，第 2 行和第 3 行的 commit 都会合并到第 1 行的 commit。这个时候，我们提交的信息会同时包含这三个 commit 的提交信息：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># This is a combination of 3 commits.</span></span>
<span class="line"><span># The first commit&#39;s message is:</span></span>
<span class="line"><span>Introduce OpenPGP and teach basic usage</span></span>
<span class="line"><span></span></span>
<span class="line"><span># This is the 2ndCommit Message:</span></span>
<span class="line"><span>Fix PostChecker::Post#urls</span></span>
<span class="line"><span></span></span>
<span class="line"><span># This is the 3rdCommit Message:</span></span>
<span class="line"><span>Hey kids, stop all the highlighting</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们将第 3 行的 squash 命令改成 fixup 命令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>pick 07c5abd Introduce OpenPGP and teach basic usage</span></span>
<span class="line"><span>s de9b1eb Fix PostChecker::Post#urls</span></span>
<span class="line"><span>f 3e7ee36 Hey kids, stop all the highlighting</span></span>
<span class="line"><span>pick fa20af3 git interactive rebase, squash, amend</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rebase 后，还是会生成两个 commit，第 2 行和第 3 行的 commit，都合并到第 1 行的 commit。但是，新的提交信息里面，第 3 行 commit 的提交信息会被注释掉：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># This is a combination of 3 commits.</span></span>
<span class="line"><span># The first commit&#39;s message is:</span></span>
<span class="line"><span>Introduce OpenPGP and teach basic usage</span></span>
<span class="line"><span></span></span>
<span class="line"><span># This is the 2ndCommit Message:</span></span>
<span class="line"><span>Fix PostChecker::Post#urls</span></span>
<span class="line"><span></span></span>
<span class="line"><span># This is the 3rdCommit Message:</span></span>
<span class="line"><span># Hey kids, stop all the highlighting</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，我们在使用 git rebase 进行操作的时候，还需要注意以下几点：</p><ul><li>删除某个 commit 行，则该 commit 会丢失掉。</li><li>删除所有的 commit 行，则 rebase 会被终止掉。</li><li>可以对 commits 进行排序，git 会从上到下进行合并。</li></ul><p>为了加深你的理解，我给你完整演示一遍合并提交。</p><p><strong>合并提交操作示例</strong></p><p>假设我们需要研发一个新的模块：user，用来在平台里进行用户的注册、登录、注销等操作，当模块完成开发和测试后，需要合并到主干分支，具体步骤如下。</p><p><strong>首先，我们新建一个分支</strong>。我们需要先基于 master 分支新建并切换到 feature 分支：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ git checkout -b feature/user</span></span>
<span class="line"><span>Switched to a new branch &#39;feature/user&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这是我们的所有 commit 历史：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ git log --oneline</span></span>
<span class="line"><span>7157e9e docs(docs): append test line &#39;update3&#39; to README.md</span></span>
<span class="line"><span>5a26aa2 docs(docs): append test line &#39;update2&#39; to README.md</span></span>
<span class="line"><span>55892fa docs(docs): append test line &#39;update1&#39; to README.md</span></span>
<span class="line"><span>89651d4 docs(doc): add README.md</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>接着，我们在</strong> <code>feature/user</code>分支进行功能的开发和测试，并遵循规范提交 commit，功能开发并测试完成后，Git 仓库的 commit 记录如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ git log --oneline</span></span>
<span class="line"><span>4ee51d6 docs(user): update user/README.md</span></span>
<span class="line"><span>176ba5d docs(user): update user/README.md</span></span>
<span class="line"><span>5e829f8 docs(user): add README.md for user</span></span>
<span class="line"><span>f40929f feat(user): add delete user function</span></span>
<span class="line"><span>fc70a21 feat(user): add create user function</span></span>
<span class="line"><span>7157e9e docs(docs): append test line &#39;update3&#39; to README.md</span></span>
<span class="line"><span>5a26aa2 docs(docs): append test line &#39;update2&#39; to README.md</span></span>
<span class="line"><span>55892fa docs(docs): append test line &#39;update1&#39; to README.md</span></span>
<span class="line"><span>89651d4 docs(doc): add README.md</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到我们提交了 5 个 commit。接下来，我们需要将 <code>feature/user</code>分支的改动合并到 master 分支，但是 5 个 commit 太多了，我们想将这些 commit 合并后再提交到 master 分支。</p><p><strong>接着，我们合并所有 commit</strong>。在上一步中，我们知道 <code>fc70a21</code>是 <code>feature/user</code>分支的第一个 commit ID，其父 commit ID 是 <code>7157e9e</code>，我们需要将<code>7157e9e</code>之前的所有分支 进行合并，这时我们可以执行：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ git rebase -i 7157e9e</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行命令后，我们会进入到一个交互界面，在该界面中，我们可以将需要合并的 4 个 commit，都执行 squash 操作，如下图所示：</p><figure><img src="`+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>修改完成后执行<code>:wq</code> 保存，会跳转到一个新的交互页面，在该页面，我们可以编辑 Commit Message，编辑后的内容如下图所示：</p><figure><img src="'+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>#</code>开头的行是 git 的注释，我们可以忽略掉，在 rebase 后，这些行将会消失掉。修改完成后执行<code>:wq</code> 保存，就完成了合并提交操作。</p><p>除此之外，这里有 2 个点需要我们注意：</p><ul><li><code>git rebase -i &lt;commid ID&gt;</code>这里的 一定要是需要合并 commit 中最旧 commit 的父 commit ID。</li><li>我们希望将 feature/user 分支的 5 个 commit 合并到一个 commit，在 git rebase 时，需要保证其中最新的一个 commit 是 pick 状态，这样我们才可以将其他 4 个 commit 合并进去。</li></ul><p><strong>然后，我们用如下命令来检查 commits 是否成功合并</strong>。可以看到，我们成功将 5 个 commit 合并成为了一个 commit：<code>d6b17e0</code>。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ git log --oneline</span></span>
<span class="line"><span>d6b17e0 feat(user): add user module with all function implements</span></span>
<span class="line"><span>7157e9e docs(docs): append test line &#39;update3&#39; to README.md</span></span>
<span class="line"><span>5a26aa2 docs(docs): append test line &#39;update2&#39; to README.md</span></span>
<span class="line"><span>55892fa docs(docs): append test line &#39;update1&#39; to README.md</span></span>
<span class="line"><span>89651d4 docs(doc): add README.md</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>最后，我们就可以将 feature 分支</strong> <code>feature/user</code> 的改动合并到主干分支，从而完成新功能的开发**。**</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ git checkout master</span></span>
<span class="line"><span>$ git merge feature/user</span></span>
<span class="line"><span>$ git log --oneline</span></span>
<span class="line"><span>d6b17e0 feat(user): add user module with all function implements</span></span>
<span class="line"><span>7157e9e docs(docs): append test line &#39;update3&#39; to README.md</span></span>
<span class="line"><span>5a26aa2 docs(docs): append test line &#39;update2&#39; to README.md</span></span>
<span class="line"><span>55892fa docs(docs): append test line &#39;update1&#39; to README.md</span></span>
<span class="line"><span>89651d4 docs(doc): add README.md</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里给你一个小提示，如果你有太多的 commit 需要合并，那么可以试试这种方式：先撤销过去的 commit，然后再建一个新的。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ git reset HEAD~3</span></span>
<span class="line"><span>$ git add .</span></span>
<span class="line"><span>$ git commit -am &quot;feat(user): add user resource&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要说明一点：除了 commit 实在太多的时候，一般情况下我不建议用这种方法，有点粗暴，而且之前提交的 Commit Message 都要重新整理一遍。</p><h3 id="修改-commit-message" tabindex="-1"><a class="header-anchor" href="#修改-commit-message"><span>修改 Commit Message</span></a></h3><p>即使我们有了 Commit Message 规范，但仍然可能会遇到提交的 Commit Message 不符合规范的情况，这个时候就需要我们能够修改之前某次 commit 的 Commit Message。</p><p>具体来说，我们有两种修改方法，分别对应两种不同情况：</p><ol><li>git commit –amend：修改最近一次 commit 的 message；</li><li>git rebase -i：修改某次 commit 的 message。</li></ol><p>接下来，我们分别来说这两种方法。</p><p><strong>git commit –amend：修改最近一次 commit 的 message</strong></p><p>有时候，我们刚提交完一个 commit，但是发现 commit 的描述不符合规范或者需要纠正，这时候，我们可以通过 <code>git commit --amend</code> 命令来修改刚刚提交 commit 的 Commit Message。具体修改步骤如下：</p><ol><li>查看当前分支的日志记录。</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ git log –oneline</span></span>
<span class="line"><span>418bd4 docs(docs): append test line &#39;update$i&#39; to README.md</span></span>
<span class="line"><span>89651d4 docs(doc): add README.md</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，最近一次的 Commit Message 是 <code>docs(docs): append test line &#39;update$i&#39; to README.md</code>，其中 <code>update$i</code> 正常应该是 <code>update1</code>。</p><ol start="2"><li>更新最近一次提交的 Commit Message</li></ol><p>在当前 Git 仓库下执行命令：<code>git commit --amend</code>，后会进入一个交互界面，在交互界面中，修改最近一次的 Commit Message，如下图所示：</p><figure><img src="`+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>修改完成后执行:wq 保存，退出编辑器之后，会在命令行显示，该 commit 的 message 的更新结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>[master 55892fa] docs(docs): append test line &#39;update1&#39; to README.md</span></span>
<span class="line"><span> Date: Fri Sep 18 13:40:42 2020 +0800</span></span>
<span class="line"><span> 1 file changed, 1 insertion(+)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>查看最近一次的 Commit Message 是否被更新</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ git log --oneline</span></span>
<span class="line"><span>55892fa docs(docs): append test line &#39;update1&#39; to README.md</span></span>
<span class="line"><span>89651d4 docs(doc): add README.md</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到最近一次 commit 的 message 成功被修改为期望的内容。</p><p><strong>git rebase -i：修改某次 commit 的 message</strong></p><p>如果我们想修改的 Commit Message 不是最近一次的 Commit Message，可以通过 <code>git rebase -i &lt;父 commit ID&gt;</code>命令来修改。这个命令在实际开发中使用频率比较高，我们一定要掌握。具体来说，使用它主要分为 4 步。</p><ol><li>查看当前分支的日志记录。</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ git log --oneline</span></span>
<span class="line"><span>1d6289f docs(docs): append test line &#39;update3&#39; to README.md</span></span>
<span class="line"><span>a38f808 docs(docs): append test line &#39;update$i&#39; to README.md</span></span>
<span class="line"><span>55892fa docs(docs): append test line &#39;update1&#39; to README.md</span></span>
<span class="line"><span>89651d4 docs(doc): add README.md</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到倒数第 3 次提交的 Commit Message 是：<code>docs(docs): append test line &#39;update$i&#39; to README.md</code>，其中 update$i 正常应该是 update2。</p><ol start="2"><li>修改倒数第 3 次提交 commit 的 message。</li></ol><p>在 Git 仓库下直接执行命令 <code>git rebase -i 55892fa</code>，然后会进入一个交互界面。在交互界面中，修改最近一次的 Commit Message。这里我们使用 reword 或者 r，保留倒数第3次的变更信息，但是修改其 message，如下图所示：</p><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>修改完成后执行<code>:wq</code> 保存，还会跳转到一个新的交互页面，如下图所示：</p><figure><img src="'+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>修改完成后执行<code>:wq</code> 保存，退出编辑器之后，会在命令行显示该 commit 的 message 的更新结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>[detached HEAD 5a26aa2] docs(docs): append test line &#39;update2&#39; to README.md</span></span>
<span class="line"><span> Date: Fri Sep 18 13:45:54 2020 +0800</span></span>
<span class="line"><span> 1 file changed, 1 insertion(+)</span></span>
<span class="line"><span>Successfully rebased and updated refs/heads/master.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Successfully rebased and updated refs/heads/master.</code>说明 rebase 成功，其实这里完成了两个步骤：更新 message，更新该 commit 的 HEAD 指针。</p><p>注意：这里一定要传入想要变更 Commit Message 的父 commit ID：<code>git rebase -i &lt;父 commit ID&gt;</code>。</p><ol start="3"><li>查看倒数第 3 次 commit 的 message 是否被更新。</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ git log --oneline</span></span>
<span class="line"><span>7157e9e docs(docs): append test line &#39;update3&#39; to README.md</span></span>
<span class="line"><span>5a26aa2 docs(docs): append test line &#39;update2&#39; to README.md</span></span>
<span class="line"><span>55892fa docs(docs): append test line &#39;update1&#39; to README.md</span></span>
<span class="line"><span>89651d4 docs(doc): add README.md</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，倒数第 3 次 commit 的 message 成功被修改为期望的内容。</p><p>这里有两点需要你注意：</p><ul><li>Commit Message 是 commit 数据结构中的一个属性，如果 Commit Message 有变更，则 commit ID 一定会变，<code>git commit --amend</code> 只会变更最近一次的 commit ID，但是 <code>git rebase -i</code> 会变更父 commit ID 之后所有提交的 commit ID。</li><li>如果当前分支有未 commit 的代码，需要先执行 <code>git stash</code> 将工作状态进行暂存，当修改完成后再执行 <code>git stash pop</code> 恢复之前的工作状态。</li></ul><h2 id="commit-message-规范自动化" tabindex="-1"><a class="header-anchor" href="#commit-message-规范自动化"><span>Commit Message 规范自动化</span></a></h2><p>其实，到这里我们也就意识到了一点：Commit Message 规范如果靠文档去约束，就会严重依赖开发者的代码素养，并不能真正保证提交的 commit 是符合规范的。</p><p>那么，有没有一种方式可以确保我们提交的 Commit Message 一定是符合规范的呢？有的，我们可以通过一些工具，来自动化地生成和检查 Commit Message 是否符合规范。</p><p>另外，既然 Commit Message 是规范的，那么我们能不能利用这些规范来实现一些更酷的功能呢？答案是有的，我将可以围绕着 Commit Message 实现的一些自动化功能绘制成了下面一张图。</p><figure><img src="`+v+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这些自动化功能可以分为以下 2 类：</p><ul><li>Commit Message 生成和检查功能：生成符合 Angular 规范的 Commit Message、Commit Message 提交前检查、历史 Commit Message 检查。</li><li>基于 Commit Message 自动生成 CHANGELOG 和 SemVer 的工具。</li></ul><p>我们可以通过下面这 5 个工具自动的完成上面的功能：</p><ul><li><a href="https://github.com/lintingzhen/commitizen-go" target="_blank" rel="noopener noreferrer">commitizen-go</a>：使你进入交互模式，并根据提示生成 Commit Message，然后提交。</li><li>commit-msg：githooks，在 commit-msg 中，指定检查的规则，commit-msg 是个脚本，可以根据需要自己写脚本实现。这门课的 commit-msg 调用了 go-gitlint 来进行检查。</li><li><a href="https://github.com/llorllale/go-gitlint" target="_blank" rel="noopener noreferrer">go-gitlint</a>：检查历史提交的 Commit Message 是否符合 Angular 规范，可以将该工具添加在 CI 流程中，确保 Commit Message 都是符合规范的。</li><li><a href="https://github.com/arnaud-deprez/gsemver" target="_blank" rel="noopener noreferrer">gsemver</a>：语义化版本自动生成工具。</li><li><a href="https://github.com/git-chglog/git-chglog" target="_blank" rel="noopener noreferrer">git-chglog</a>：根据 Commit Message 生成 CHANGELOG。</li></ul><p>这些工具你先有个印象就好了，在后面的课程内容中，我会带你通过实际使用来熟悉它们的用法。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>今天我向你介绍了 Commit Message 规范，主要讲了业界使用最多的 Angular 规范。</p><p>Angular 规范中，Commit Message 包含三个部分：Header、Body 和 Footer。Header 对 commit 做了高度概括，Body 部分是对本次 commit 的更详细描述，Footer 部分主要用来说明本次 commit 导致的后果。格式如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>&lt;type&gt;[optional scope]: &lt;description&gt;</span></span>
<span class="line"><span>// 空行</span></span>
<span class="line"><span>[optional body]</span></span>
<span class="line"><span>// 空行</span></span>
<span class="line"><span>[optional footer(s)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，我们也需要控制 commit 的提交频率，比如可以在开发完一个功能、修复完一个 bug、下班前提交 commit。</p><p>最后，我们也需要掌握一些常见的提交操作，例如通过 <code>git rebase -i</code> 来合并提交 commit，通过 <code>git commit --amend</code> 或 <code>git rebase -i</code> 来修改 commit message。</p><h2 id="课后练习" tabindex="-1"><a class="header-anchor" href="#课后练习"><span>课后练习</span></a></h2><ol><li>新建一个 git repository，提交 4 个符合 Angular 规范的 Commit Message，并合并前 2 次提交。</li><li>使用 git-chglog 工具来生成 CHANGEOG，使用 gsemver 工具来生成语义化版本号。</li></ol><p>期待在留言区看到你的思考和答案，也欢迎和我一起探讨关于规范设计的问题，我们下一讲见！</p>`,174)]))}const M=e(k,[["render",f]]),F=JSON.parse('{"path":"/excerpts/golang-program/05-golang-program.html","title":"05 规范设计（下）：项目开发杂乱无章，如何规范？","lang":"zh-CN","frontmatter":{"title":"05 规范设计（下）：项目开发杂乱无章，如何规范？","article":true,"order":6,"star":false,"category":["摘录"],"tag":["Go 语言项目开发实战"],"date":"2025-10-20T00:00:00.000Z","footer":"Always coding, always learning","description":"05 规范设计（下）：commit 信息风格迥异、难以阅读，如何规范？ 你好，我是孔令飞。今天，我们继续学习非编码类规范中的 Commit 规范。 我们在做代码开发时，经常需要提交代码，提交代码时需要填写 Commit Message（提交说明），否则就不允许提交。 而在实际开发中，我发现每个研发人员提交 Commit Message 的格式可以说是五...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"05 规范设计（下）：项目开发杂乱无章，如何规范？\\",\\"image\\":[\\"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/5-1.png\\",\\"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/5-2.png\\",\\"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/5-3.png\\",\\"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/5-4.png\\",\\"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/5-5.png\\",\\"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/5-6.png\\",\\"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/5-7.png\\",\\"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/5-8.png\\",\\"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/5-9.png\\",\\"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/5-10.png\\",\\"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/5-11.png\\",\\"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/5-12.png\\",\\"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/5-13.png\\"],\\"datePublished\\":\\"2025-10-20T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-20T08:37:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KBchulan\\",\\"url\\":\\"https://kbchulan.github.io/ClBlogs/\\"}]}"],["meta",{"property":"og:url","content":"https://kbchulan.github.io/ClBlogs/ClBlogs/excerpts/golang-program/05-golang-program.html"}],["meta",{"property":"og:site_name","content":"KBchulan的博客"}],["meta",{"property":"og:title","content":"05 规范设计（下）：项目开发杂乱无章，如何规范？"}],["meta",{"property":"og:description","content":"05 规范设计（下）：commit 信息风格迥异、难以阅读，如何规范？ 你好，我是孔令飞。今天，我们继续学习非编码类规范中的 Commit 规范。 我们在做代码开发时，经常需要提交代码，提交代码时需要填写 Commit Message（提交说明），否则就不允许提交。 而在实际开发中，我发现每个研发人员提交 Commit Message 的格式可以说是五..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/5-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-20T08:37:52.000Z"}],["meta",{"property":"article:tag","content":"Go 语言项目开发实战"}],["meta",{"property":"article:published_time","content":"2025-10-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-20T08:37:52.000Z"}]]},"git":{"createdTime":1760949472000,"updatedTime":1760949472000,"contributors":[{"name":"KBchulan","username":"KBchulan","email":"18737519552@163.com","commits":1,"url":"https://github.com/KBchulan"}]},"readingTime":{"minutes":22.06,"words":6618},"filePathRelative":"excerpts/golang-program/05-golang-program.md","excerpt":"","autoDesc":true}');export{M as comp,F as data};
