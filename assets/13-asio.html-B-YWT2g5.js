import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,a as e,o as t}from"./app-BE9g2F5B.js";const l={};function h(p,s){return t(),a("div",null,[n(" more "),s[0]||(s[0]=e(`<h1 id="_13-服务器优雅退出" tabindex="-1"><a class="header-anchor" href="#_13-服务器优雅退出"><span>13 服务器优雅退出</span></a></h1><p>上一节我们引入了逻辑层，所有网络层的数据都会被投递到逻辑队列，由逻辑层逐一处理，但是请考虑这么一个情况，我们关闭服务器(比如按下 ctrl + c)，那么该进程是不是会被强行杀死，而不会调用任何析构函数，且不提各个对象无法被析构导致的内存泄露，就假设逻辑队列存在十分重要的充值等信息，是不是没有被处理就丢失了，那很显然是无法接受的，本节我们就是解决此隐患。</p><h2 id="修改服务器" tabindex="-1"><a class="header-anchor" href="#修改服务器"><span>修改服务器</span></a></h2><p>在main()函数中我们只需要增加对信号的处理即可，完整的main函数如下：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    boost::asio::io_context ioc;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    boost::asio::signal_set </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">signals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ioc, SIGINT, SIGTERM);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    signals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">async_wait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">ioc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">](</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> boost::system::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">error_code</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> signal_number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">err) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Received signal: {}, the server stoped.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, signal_number);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        ioc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Error receiving signal: {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    core::Server server{ioc, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10088</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    ioc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> boost::system::error_code</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> err) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;error code is: {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们向<code>asio::signal_set</code>注册了 <strong>SIGINT</strong> 和 <strong>SIGTERM</strong> 这两个进程信号。<strong>SIGINT</strong> 通常在用户按下<code>Ctrl+C</code>时触发，而 <strong>SIGTERM</strong> 是标准的程序终止信号，允许程序进行清理工作。</p><p>通过<code>signals.async_wait</code>注册的回调函数会在捕捉到上述信号时被执行。在回调中，我们调用了<code>ioc.stop()</code>，这个操作会使主线程中的<code>ioc.run()</code>调用立即返回，让 main 函数得以继续执行并准备退出。</p><p>这正是实现优雅退出的关键所在：</p><ol><li><strong>程序退出流程启动</strong>：<code>main</code>函数继续执行并走向终点。</li><li><strong>触发析构</strong>：由于我们遵循RAII设计，<code>main</code>函数作用域内的所有栈上对象（例如<code>Server</code>实例）会在此刻被自动析构。</li><li><strong>安全关闭</strong>：逻辑层单例的析构会设置_stop标志，停止接收新的数据请求，并跳出工作线程的循环，将消息队列中所有待处理的任务全部完成后退出。</li></ol><p>通过这套机制，我们确保了服务器在关闭前能够处理完所有挂起的重要业务，同时所有资源都能被正确释放，从而有效避免了数据丢失和内存泄漏的风险。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>本节我们通过捕捉 <code>SIGINT</code> 和 <code>SIGTERM</code> 信号，并结合asio提供的 <code>asio::signal_set</code> 中存在的异步等待，实现了一个优雅的服务器退出方案。</p><p>本节的核心是：<strong>通过信号处理触发<code>ioc.stop()</code>，确保主进程正常退出，从而实现服务器的优雅、安全关闭</strong>。</p><p>本节代码详见<a href="https://github.com/KBchulan/ClBlogs-Src/blob/main/blogs-main/asio/13-exit/src/main.cc" target="_blank" rel="noopener noreferrer">此处</a>。</p>`,14))])}const d=i(l,[["render",h]]),o=JSON.parse('{"path":"/blogs-main/asio/13-asio.html","title":"13 服务器优雅退出","lang":"zh-CN","frontmatter":{"title":"13 服务器优雅退出","article":true,"order":13,"star":false,"category":["网络"],"tag":["asio"],"date":"2025-07-18T00:00:00.000Z","description":"修改主函数，通过捕捉信号的方式实现优雅退出","footer":"Always coding, always learning","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"13 服务器优雅退出\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-18T15:29:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KBchulan\\",\\"url\\":\\"https://kbchulan.github.io/ClBlogs/\\"}]}"],["meta",{"property":"og:url","content":"https://kbchulan.github.io/ClBlogs/ClBlogs/blogs-main/asio/13-asio.html"}],["meta",{"property":"og:site_name","content":"KBchulan的博客"}],["meta",{"property":"og:title","content":"13 服务器优雅退出"}],["meta",{"property":"og:description","content":"修改主函数，通过捕捉信号的方式实现优雅退出"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-18T15:29:43.000Z"}],["meta",{"property":"article:tag","content":"asio"}],["meta",{"property":"article:published_time","content":"2025-07-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-18T15:29:43.000Z"}]]},"git":{"createdTime":1752852583000,"updatedTime":1752852583000,"contributors":[{"name":"KBchulan","username":"KBchulan","email":"145010602+KBchulan@users.noreply.github.com","commits":1,"url":"https://github.com/KBchulan"}]},"readingTime":{"minutes":2.42,"words":725},"filePathRelative":"blogs-main/asio/13-asio.md","excerpt":""}');export{d as comp,o as data};
