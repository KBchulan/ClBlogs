import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as i,o as e}from"./app-BBs2hMIi.js";const l="/ClBlogs/assets/pages/golang-program/2-1.jpg",p="/ClBlogs/assets/pages/golang-program/2-2.jpg",o="/ClBlogs/assets/pages/golang-program/2-3.jpg",t={};function r(d,s){return e(),a("div",null,s[0]||(s[0]=[i(`<h1 id="_02-环境准备-如何安装和配置一个基本的-go-开发环境" tabindex="-1"><a class="header-anchor" href="#_02-环境准备-如何安装和配置一个基本的-go-开发环境"><span>02 环境准备：如何安装和配置一个基本的 Go 开发环境？</span></a></h1><p>你好，我是孔令飞。</p><p>上一讲我们讲了 IAM 系统的功能和架构，接下来的两讲，我们就将它部署到你的服务器上。不过，在正式部署之前，我们还需要准备一个 Go 开发环境，这是因为我们是通过编译源码来获取部署需要的二进制文件的。</p><p>因此，今天这一讲，我先手把手带你配置好一个 Go 的开发环境，供你以后开发、编译用，下一讲再带你部署 IAM 系统。</p><p>想要配置一个 Go 开发环境，我们可以通过以下 4 步实现：</p><ol><li>Linux 服务器申请和配置</li><li>依赖安装和配置</li><li>Go 编译环境安装和配置</li><li>Go 开发 IDE 安装和配置</li></ol><h2 id="linux-服务器申请和配置" tabindex="-1"><a class="header-anchor" href="#linux-服务器申请和配置"><span>Linux 服务器申请和配置</span></a></h2><p>毫无疑问，要安装一个 Go 开发环境，你首先需要有一个 Linux 服务器。Linux 服务器有很多操作系统可供选择，例如：CentOS、Ubuntu、RHEL、Debian 等，但目前生产环境用得最多的还是 CentOS 系统，为了跟生产环境保持一致，我们选择当前最新的 CentOS 版本：CentOS 8.2。</p><p>因为本专栏的所有操作都是在 CentOS 8.2 系统上进行的，为了避免环境不一致导致的操作失败，我建议你也使用 CentOS 8.2。安装一个 Linux 服务器需要两步：服务器申请和配置。</p><h3 id="linux-服务器申请" tabindex="-1"><a class="header-anchor" href="#linux-服务器申请"><span>Linux 服务器申请</span></a></h3><p>我们可以通过以下 3 种方式来安装一个 CentOS 8.2 系统。</p><ol><li>在物理机上安装一个 CentOS 8.2 系统。</li><li>在 Windows/MacBook 上安装虚拟机管理软件，用虚拟机管理软件创建 CentOS 8.2 虚拟机。其中，Windows 建议用 VMWare Workstation 来创建虚拟机，MacBook 建议用 VirtualBox 来创建虚拟机。</li><li>在诸如腾讯云、阿里云、华为云等平台上购买一个虚拟机，并预装 CentOS 8.2 系统。</li></ol><h3 id="linux-服务器配置" tabindex="-1"><a class="header-anchor" href="#linux-服务器配置"><span>Linux 服务器配置</span></a></h3><p>申请完 Linux 服务之后，我们需要通过 SecureCRT 或 Xshell 等工具登录 Linux 服务器，并对服务器做一些简单必要的配置，包括创建普通用户、添加 sudoers、配置 <code>$HOME/.bashrc</code> 文件。接下来，我们一一来说。</p><p><strong>第一步，用Root 用户登录Linux 系统，并创建普通用户。</strong></p><p>一般来说，一个项目会由多个开发人员协作完成，为了节省企业成本，公司不会给每个开发人员都配备一台服务器，而是让所有开发人员共用一个开发机，通过普通用户登录开发机进行开发。因此，为了模拟真实的企业开发环境，我们也通过一个普通用户的身份来进行项目的开发，创建方法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ useradd going # 创建 going 用户，通过 going 用户登录开发机进行开发</span></span>
<span class="line"><span>$ passwd going # 设置密码</span></span>
<span class="line"><span>Changing password for user going.</span></span>
<span class="line"><span>New password:</span></span>
<span class="line"><span>Retype new password:</span></span>
<span class="line"><span>passwd: all authentication tokens updated successfully.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不仅如此，使用普通用户登录和操作开发机也可以保证系统的安全性，这是一个比较好的习惯，所以我们在日常开发中也要尽量避免使用 Root 用户。</p><p><strong>第二步，添加 sudoers。</strong></p><p>我们知道很多时候，普通用户也要用到 Root 的一些权限，但 Root 用户的密码一般是由系统管理员维护并定期更改的，每次都向管理员询问密码又很麻烦。因此，我建议你将普通用户加入到 sudoers 中，这样普通用户就可以通过 sudo 命令来暂时获取 Root 的权限。具体来说，你可以执行如下命令添加：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ sed -i &#39;/^root.*ALL=(ALL).*ALL/a\\going\\tALL=(ALL) \\tALL&#39; /etc/sudoers</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>第三步，替换 CentOS 8.4 系统中自带的 Yum 源。</strong></p><p>由于 Red Hat 提前宣布 CentOS 8 于 2021 年 12 月 31 日停止维护，官方的 Yum 源已不可使用，所以需要切换官方的 Yum 源，这里选择阿里提供的 Yum 源。切换命令如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ mv /etc/yum.repos.d /etc/yum.repos.d.bak # 先备份原有的 Yum 源</span></span>
<span class="line"><span>$ mkdir /etc/yum.repos.d</span></span>
<span class="line"><span>$ wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo</span></span>
<span class="line"><span>$ yum clean all &amp;&amp; yum makecache</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第四步，用新的用户名（going）和密码登录Linux 服务器。</strong> 这一步也可以验证普通用户是否创建成功。</p><p><strong>第五步，配置 $HOME/.bashrc 文件。</strong></p><p>我们登录新服务器后的第一步就是配置 <code>$HOME/.bashrc</code> 文件，以使 Linux 登录 shell 更加易用，例如配置 <code>LANG</code> 解决中文乱码，配置 <code>PS1</code> 可以避免整行都是文件路径，并将 <code>$HOME/bin</code> 加入到 <code>PATH</code> 路径中。配置后的内容如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># .bashrc</span></span>
<span class="line"><span></span></span>
<span class="line"><span># User specific aliases and functions</span></span>
<span class="line"><span></span></span>
<span class="line"><span>alias rm=&#39;rm -i&#39;</span></span>
<span class="line"><span>alias cp=&#39;cp -i&#39;</span></span>
<span class="line"><span>alias mv=&#39;mv -i&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Source global definitions</span></span>
<span class="line"><span>if [ -f /etc/bashrc ]; then</span></span>
<span class="line"><span>        . /etc/bashrc</span></span>
<span class="line"><span>fi</span></span>
<span class="line"><span></span></span>
<span class="line"><span># User specific environment</span></span>
<span class="line"><span># Basic envs</span></span>
<span class="line"><span>export LANG=&quot;en_US.UTF-8&quot; # 设置系统语言为 en_US.UTF-8，避免终端出现中文乱码</span></span>
<span class="line"><span>export PS1=&#39;[\\u@dev \\W]\\$ &#39; # 默认的 PS1 设置会展示全部的路径，为了防止过长，这里只展示：&quot;用户名@dev 最后的目录名&quot;</span></span>
<span class="line"><span>export WORKSPACE=&quot;$HOME/workspace&quot; # 设置工作目录</span></span>
<span class="line"><span>export PATH=$HOME/bin:$PATH # 将 $HOME/bin 目录加入到 PATH 变量中</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Default entry folder</span></span>
<span class="line"><span>cd $WORKSPACE # 登录系统，默认进入 workspace 目录</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有一点需要我们注意，在 export <code>PATH</code> 时，最好把 <code>$PATH</code> 放到最后，因为我们添加到目录中的命令是期望被优先搜索并使用的。配置完 <code>$HOME/.bashrc</code> 后，我们还需要创建工作目录 workspace。将工作文件统一放在 <code>$HOME/workspace</code> 目录中，有几点好处。</p><ul><li>可以使我们的<code>$HOME</code>目录保持整洁，便于以后的文件查找和分类。</li><li>如果哪一天 <code>/</code>分区空间不足，可以将整个 <code>workspace</code> 目录 mv 到另一个分区中，并在 <code>/</code>分区中保留软连接，例如：<code>/home/going/workspace -&gt; /data/workspace/</code>。</li><li>如果哪天想备份所有的工作文件，可以直接备份 <code>workspace</code>。</li></ul><p>具体的操作指令是<code>$ mkdir -p $HOME/workspace</code>。配置好 <code>$HOME/.bashrc</code> 文件后，我们就可以执行 bash 命令将配置加载到当前 shell 中了。</p><p>至此，我们就完成了 Linux 开发机环境的申请及初步配置。</p><h2 id="依赖安装和配置" tabindex="-1"><a class="header-anchor" href="#依赖安装和配置"><span>依赖安装和配置</span></a></h2><p>在 Linux 系统上安装 IAM 系统会依赖一些 RPM 包和工具，有些是直接依赖，有些是间接依赖。为了避免后续的操作出现依赖错误，例如，因为包不存在而导致的编译、命令执行错误等，我们先统一依赖安装和配置。安装和配置步骤如下。</p><p><strong>第一步，安装依赖。</strong></p><p>首先，我们在 CentOS 系统上通过 <code>yum</code> 命令来安装所需工具的依赖，安装命令如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ sudo yum -y install make autoconf automake cmake perl-CPAN libcurl-devel libtool gcc gcc-c++ glibc-headers zlib-devel git-lfs telnet lrzsz jq expat-devel openssl-devel</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>虽然有些 CentOS 8.2 系统已经默认安装这些依赖了，但是为了确保它们都能被安装，我仍然会尝试安装一遍。如果系统提示 <code>Package xxx is already installed.</code>，说明已经安装好了，你直接忽略即可。</p><p><strong>第二步，安装 Git。</strong></p><p>因为安装 IAM 系统、执行 <code>go get</code> 命令、安装 protobuf 工具等都是通过 Git 来操作的，所以接下来我们还需要安装 Git。由于低版本的 Git 不支持<code>--unshallow</code> 参数，而 go get 在安装 Go 包时会用到 <code>git fetch --unshallow</code> 命令，因此我们要确保安装一个高版本的 Git，具体的安装方法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ cd /tmp</span></span>
<span class="line"><span>$ wget --no-check-certificate https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.36.1.tar.gz</span></span>
<span class="line"><span>$ tar -xvzf git-2.36.1.tar.gz</span></span>
<span class="line"><span>$ cd git-2.36.1/</span></span>
<span class="line"><span>$ ./configure</span></span>
<span class="line"><span>$ make</span></span>
<span class="line"><span>$ sudo make install</span></span>
<span class="line"><span>$ git --version          # 输出 git 版本号，说明安装成功</span></span>
<span class="line"><span>git version 2.36.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意啦，按照上面的步骤安装好之后，我们要把 Git 的二进制目录添加到 PATH 路径中，不然 Git 可能会因为找不到一些命令而报错。你可以通过执行以下命令添加目录：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>tee -a $HOME/.bashrc &lt;&lt;&#39;EOF&#39;</span></span>
<span class="line"><span># Configure for git</span></span>
<span class="line"><span>export PATH=/usr/local/libexec/git-core:$PATH</span></span>
<span class="line"><span>EOF</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第三步，配置 Git。</strong> 我们直接执行如下命令配置 Git：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ git config --global user.name &quot;Lingfei Kong&quot;    # 用户名改成自己的</span></span>
<span class="line"><span>$ git config --global user.email &quot;[email protected]&quot;    # 邮箱改成自己的</span></span>
<span class="line"><span>$ git config --global credential.helper store    # 设置 Git，保存用户名和密码</span></span>
<span class="line"><span>$ git config --global core.longpaths true # 解决 Git 中 &#39;Filename too long&#39; 的错误</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了按照上述步骤配置 Git 之外，我们还有几点需要注意。</p><p>首先，在 Git 中，我们会把非 ASCII 字符叫做 Unusual 字符。这类字符在 Git 输出到终端的时候默认是用 8 进制转义字符输出的（以防乱码），但现在的终端多数都支持直接显示非 ASCII 字符，所以我们可以关闭掉这个特性，具体的命令如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ git config --global core.quotepath off</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其次，GitHub 限制最大只能克隆 100M 的单个文件，为了能够克隆大于 100M 的文件，我们还需要安装 Git Large File Storage，安装方式如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ git lfs install --skip-repo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>好啦，现在我们就完成了依赖的安装和配置。</p><h2 id="go-编译环境安装和配置" tabindex="-1"><a class="header-anchor" href="#go-编译环境安装和配置"><span>Go 编译环境安装和配置</span></a></h2><p>我们知道，Go 是一门编译型语言，所以在部署 IAM 系统之前，我们需要将代码编译成可执行的二进制文件。因此我们需要安装 Go 编译环境。</p><p>除了 Go，我们也会用 gRPC 框架展示 RPC 通信协议的用法，所以我们也需要将 ProtoBuf 的.proto 文件编译成 Go 语言的接口。因此，我们也需要安装 ProtoBuf 的编译环境。</p><h3 id="go-编译环境安装和配置-1" tabindex="-1"><a class="header-anchor" href="#go-编译环境安装和配置-1"><span>Go 编译环境安装和配置</span></a></h3><p>安装 Go 语言相对来说比较简单，我们只需要下载源码包、设置相应的环境变量即可。</p><p>首先，我们从 Go 语言官方网站下载对应的 Go 安装包以及源码包，这里我下载的是 go1.18.3 版本：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ wget -P /tmp/ https://golang.google.cn/dl/go1.18.3.linux-amd64.tar.gz</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接着，我们完成解压和安装，命令如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ mkdir -p $HOME/go</span></span>
<span class="line"><span>$ tar -xvzf /tmp/go1.18.3.linux-amd64.tar.gz -C $HOME/go</span></span>
<span class="line"><span>$ mv $HOME/go/go $HOME/go/go1.18.3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，我们执行以下命令，将下列环境变量追加到<code>$HOME/.bashrc</code> 文件中。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ tee -a $HOME/.bashrc &lt;&lt;&#39;EOF&#39;</span></span>
<span class="line"><span># Go envs</span></span>
<span class="line"><span>export GOVERSION=go1.18.3 # Go 版本设置</span></span>
<span class="line"><span>export GO_INSTALL_DIR=$HOME/go # Go 安装目录</span></span>
<span class="line"><span>export GOROOT=$GO_INSTALL_DIR/$GOVERSION # GOROOT 设置</span></span>
<span class="line"><span>export GOPATH=$WORKSPACE/golang # GOPATH 设置</span></span>
<span class="line"><span>export PATH=$GOROOT/bin:$GOPATH/bin:$PATH # 将 Go 语言自带的和通过 go install 安装的二进制文件加入到 PATH 路径中</span></span>
<span class="line"><span>export GO111MODULE=&quot;on&quot; # 开启 Go moudles 特性</span></span>
<span class="line"><span>export GOPROXY=https://goproxy.cn,direct # 安装 Go 模块时，代理服务器设置</span></span>
<span class="line"><span>export GOPRIVATE=</span></span>
<span class="line"><span>export GOSUMDB=off # 关闭校验 Go 依赖包的哈希值</span></span>
<span class="line"><span>EOF</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么要增加这么多环境变量呢？这是因为，Go 语言是通过一系列的环境变量来控制 Go 编译器行为的。因此，我们一定要理解每一个环境变量的含义。</p><figure><img src="`+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>因为 Go 以后会用 Go modules 来管理依赖，所以我建议你将 GO111MODULE 设置为 on。</p><p>在使用模块的时候，<code>$GOPATH</code> 是无意义的，不过它还是会把下载的依赖储存在 <code>$GOPATH/pkg/mod</code> 目录中，也会把 go install 的二进制文件存放在 <code>$GOPATH/bin</code> 目录中。</p><p>另外，我们还要将<code>$GOPATH/bin</code>、<code>$GOROOT/bin</code> 加入到 Linux 可执行文件搜索路径中。这样一来，我们就可以直接在 bash shell 中执行 go 自带的命令，以及通过 go install 安装的命令。</p><p>然后就是进行测试了，如果我们执行 go version 命令可以成功输出 Go 的版本，就说明 Go 编译环境安装成功。具体的命令如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ bash</span></span>
<span class="line"><span>$ go version</span></span>
<span class="line"><span>go version go1.18.3 linux/amd64</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，初始化工作区。</p><p>本专栏使用的 Go 版本为 go1.18.3，go1.18.3 支持多模块工作区，所以这里也需要初始化工作区。初始化命令如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ mkdir -p $GOPATH &amp;&amp; cd $GOPATH</span></span>
<span class="line"><span>$ go work init</span></span>
<span class="line"><span>$ go env GOWORK # 执行此命令，查看 go.work 工作区文件路径</span></span>
<span class="line"><span>/home/going/workspace/golang/go.work</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="protobuf-编译环境安装" tabindex="-1"><a class="header-anchor" href="#protobuf-编译环境安装"><span>ProtoBuf 编译环境安装</span></a></h3><p>接着，我们再来安装 protobuf 的编译器 protoc。protoc 需要 protoc-gen-go 来完成 Go 语言的代码转换，因此我们需要安装 protoc 和 protoc-gen-go 这 2 个工具。它们的安装方法比较简单，你直接看我下面给出的代码和操作注释就可以了。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># 第一步：安装 protobuf</span></span>
<span class="line"><span>$ cd /tmp/</span></span>
<span class="line"><span>$ git clone -b v3.21.1 --depth=1 https://github.com/protocolbuffers/protobuf</span></span>
<span class="line"><span>$ cd protobuf</span></span>
<span class="line"><span>$ ./autogen.sh</span></span>
<span class="line"><span>$ ./configure</span></span>
<span class="line"><span>$ make</span></span>
<span class="line"><span>$ sudo make install</span></span>
<span class="line"><span>$ protoc --version # 查看 protoc 版本，成功输出版本号，说明安装成功</span></span>
<span class="line"><span>libprotoc 3.21.1</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 第二步：安装 protoc-gen-go</span></span>
<span class="line"><span>$ go install github.com/golang/protobuf/[email protected]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你第一次执行 go install 命令的时候，因为本地无缓存，所以需要下载所有的依赖模块。因此安装速度会比较慢，请你耐心等待。</p><h2 id="go-开发-ide-安装和配置" tabindex="-1"><a class="header-anchor" href="#go-开发-ide-安装和配置"><span>Go 开发 IDE 安装和配置</span></a></h2><p>编译环境准备完之后，你还需要一个代码编辑器才能开始 Go 项目开发。为了提高开发效率，你还需要将这个编辑器配置成 Go IDE。</p><p>目前，GoLand、VSCode 这些 IDE 都很优秀，但它们都是 Windows 系统下的 IDE。在 Linux 系统下我们可以选择将 Vim 配置成 Go IDE。熟练 Vim IDE 操作之后，开发效率不输 GoLand 和 VSCode。有多种方法可以配置一个Vim IDE，这里我选择使用 vim-go 将 Vim 配置成一个 Go IDE。vim-go 是社区比较受欢迎的 Vim Go 开发插件，可以用来方便地将一个 Vim 配置成 Vim IDE。</p><p>Vim IDE 的安装和配置分为以下2步。</p><p><strong>第一步，安装 vim-go。</strong></p><p>安装命令如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ rm -f $HOME/.vim; mkdir -p ~/.vim/pack/plugins/start/</span></span>
<span class="line"><span>$ git clone --depth=1 https://github.com/fatih/vim-go.git ~/.vim/pack/plugins/start/vim-go</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第二步，Go 工具安装。</strong></p><p>vim-go 会用到一些 Go 工具，比如在函数跳转时会用到 guru、godef 工具，在格式化时会用到 goimports，所以你也需要安装这些工具。安装方式如下：执行 <code>vi /tmp/test.go</code>，然后输入 <code>:GoInstallBinaries</code> 安装 vim-go 需要的工具。</p><p>安装后的 Go IDE 常用操作的按键映射如下表所示：</p><figure><img src="`+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>这一讲，我们一起安装和配置了一个 Go 开发环境，为了方便你回顾，我将安装和配置过程绘制成了一个流程图，如下所示。</p><figure><img src="'+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>有了这个开发环境，接下来我们就可以在学习的过程中随时进行编码，来熟悉和验证知识点了，所以你一定要在学习后面的课程之前先完成这一讲的部署。</p><h2 id="课后练习" tabindex="-1"><a class="header-anchor" href="#课后练习"><span>课后练习</span></a></h2><ol><li>试着编写一个 main.go，在 main 函数中打印 <code>Hello World</code>，并执行 <code>go run main.go</code> 运行代码，测试 Go 开发环境。</li><li>试着编写一个 main.go，代码如下：</li></ol><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello World&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将鼠标放在 <strong>Println</strong> 上，键入 <strong>Enter</strong> 键跳转到函数定义处，键入 <strong>Ctrl + I</strong> 返回到跳转点。</p><p>期待在留言区看到你的思考和答案，也欢迎和我一起探讨环境安装过程中的问题，我们下一讲见！</p>`,96)]))}const h=n(t,[["render",r]]),u=JSON.parse('{"path":"/excerpts/golang-program/02-golang-program.html","title":"02 环境准备：如何安装和配置一个基本的 Go 开发环境？","lang":"zh-CN","frontmatter":{"title":"02 环境准备：如何安装和配置一个基本的 Go 开发环境？","article":true,"order":3,"star":false,"category":["摘录"],"tag":["Go 语言项目开发实战"],"date":"2025-10-16T00:00:00.000Z","footer":"Always coding, always learning","description":"02 环境准备：如何安装和配置一个基本的 Go 开发环境？ 你好，我是孔令飞。 上一讲我们讲了 IAM 系统的功能和架构，接下来的两讲，我们就将它部署到你的服务器上。不过，在正式部署之前，我们还需要准备一个 Go 开发环境，这是因为我们是通过编译源码来获取部署需要的二进制文件的。 因此，今天这一讲，我先手把手带你配置好一个 Go 的开发环境，供你以后开...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"02 环境准备：如何安装和配置一个基本的 Go 开发环境？\\",\\"image\\":[\\"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/2-1.jpg\\",\\"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/2-2.jpg\\",\\"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/2-3.jpg\\"],\\"datePublished\\":\\"2025-10-16T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-17T13:30:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KBchulan\\",\\"url\\":\\"https://kbchulan.github.io/ClBlogs/\\"}]}"],["meta",{"property":"og:url","content":"https://kbchulan.github.io/ClBlogs/ClBlogs/excerpts/golang-program/02-golang-program.html"}],["meta",{"property":"og:site_name","content":"KBchulan的博客"}],["meta",{"property":"og:title","content":"02 环境准备：如何安装和配置一个基本的 Go 开发环境？"}],["meta",{"property":"og:description","content":"02 环境准备：如何安装和配置一个基本的 Go 开发环境？ 你好，我是孔令飞。 上一讲我们讲了 IAM 系统的功能和架构，接下来的两讲，我们就将它部署到你的服务器上。不过，在正式部署之前，我们还需要准备一个 Go 开发环境，这是因为我们是通过编译源码来获取部署需要的二进制文件的。 因此，今天这一讲，我先手把手带你配置好一个 Go 的开发环境，供你以后开..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://kbchulan.github.io/ClBlogs/ClBlogs/assets/pages/golang-program/2-1.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-17T13:30:28.000Z"}],["meta",{"property":"article:tag","content":"Go 语言项目开发实战"}],["meta",{"property":"article:published_time","content":"2025-10-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-17T13:30:28.000Z"}]]},"git":{"createdTime":1760707828000,"updatedTime":1760707828000,"contributors":[{"name":"KBchulan","username":"KBchulan","email":"18737519552@163.com","commits":1,"url":"https://github.com/KBchulan"}]},"readingTime":{"minutes":12.6,"words":3780},"filePathRelative":"excerpts/golang-program/02-golang-program.md","excerpt":"","autoDesc":true}');export{h as comp,u as data};
