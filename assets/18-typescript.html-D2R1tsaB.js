import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as l,a,o as n}from"./app-4Vi4W1hc.js";const e={};function h(k,i){return n(),t("div",null,[l(" more "),i[0]||(i[0]=a(`<p>本章节会介绍一下 tsconfig.json 的所有配置选项，在前面的章节只用上了 &quot;strict&quot; 的配置，如下是所有的配置选项的解释。</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 访问 https://aka.ms/tsconfig 以阅读有关此文件的更多信息 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* Projects */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;incremental&quot;: true,                              /* 将 .tsbuildinfo 文件保存起来，以便项目可以进行增量编译。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;composite&quot;: true,                                /* 启用约束，允许一个 TypeScript 项目可以被项目引用功能使用。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;tsBuildInfoFile&quot;: &quot;./.tsbuildinfo&quot;,              /* 指定 .tsbuildinfo 增量编译文件的路径。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;disableSourceOfProjectReferenceRedirect&quot;: true,  /* 在引用复合项目时，禁用优先使用源文件而不是声明文件。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;disableSolutionSearching&quot;: true,                 /* 在编辑时，使项目退出多项目引用的检查。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;disableReferencedProjectLoad&quot;: true,             /* 减少 TypeScript 自动加载的项目数量。 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* Language and Environment */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;target&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;es2016&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,                                  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 为生成的 JavaScript 设置语言版本，并包含兼容的库声明。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;lib&quot;: [],                                        /* 指定一组描述目标运行时环境的捆绑库声明文件。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;jsx&quot;: &quot;preserve&quot;,                                /* 指定生成的 JSX 代码的格式。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;libReplacement&quot;: true,                           /* 启用对 &#39;lib&#39; 选项的替代支持。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;experimentalDecorators&quot;: true,                   /* 启用对旧版实验性装饰器的实验性支持。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;emitDecoratorMetadata&quot;: true,                    /* 在源文件中为带装饰器的声明生成设计时类型元数据。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;jsxFactory&quot;: &quot;&quot;,                                 /* 指定在目标为 React JSX 时使用的 JSX 工厂函数，例如 &#39;React.createElement&#39; 或 &#39;h&#39;。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;jsxFragmentFactory&quot;: &quot;&quot;,                         /* 指定在目标为 React JSX 时用于片段的 JSX Fragment 引用，例如 &#39;React.Fragment&#39; 或 &#39;Fragment&#39;。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;jsxImportSource&quot;: &quot;&quot;,                            /* 在使用 &#39;jsx: react-jsx*&#39; 时，指定用于导入 JSX 工厂函数的模块说明符。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;reactNamespace&quot;: &quot;&quot;,                             /* 指定为 &#39;createElement&#39; 调用的对象。这只在目标为 &#39;react&#39; JSX 时适用。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;noLib&quot;: true,                                    /* 禁止包含任何库文件，包括默认的 lib.d.ts。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;useDefineForClassFields&quot;: true,                  /* 生成符合 ECMAScript 标准的类字段。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;moduleDetection&quot;: &quot;auto&quot;,                        /* 控制用于检测模块格式的 JS 文件的方法。 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* Modules */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;module&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;commonjs&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,                                </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 指定生成什么样的模块代码。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;rootDir&quot;: &quot;./&quot;,                                  /* 指定源文件中的根文件夹。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;moduleResolution&quot;: &quot;node10&quot;,                     /* 指定 TypeScript 如何从给定的模块说明符中查找文件。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;baseUrl&quot;: &quot;./&quot;,                                  /* 指定解析非相对模块名的基准目录。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;paths&quot;: {},                                      /* 指定一组路径映射，将导入重定向到其他查找位置。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;rootDirs&quot;: [],                                   /* 允许在解析模块时将多个文件夹视为一个。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;typeRoots&quot;: [],                                  /* 指定多个像 &#39;./node_modules/@types&#39; 一样作用的文件夹。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;types&quot;: [],                                      /* 指定要包含的类型包名称，即使在源文件中没有引用它们。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;allowUmdGlobalAccess&quot;: true,                     /* 允许从模块中访问 UMD 全局变量。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;moduleSuffixes&quot;: [],                             /* 解析模块时要搜索的文件名后缀列表。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;allowImportingTsExtensions&quot;: true,               /* 允许导入时包含 TypeScript 文件扩展名。需要设置 &#39;--moduleResolution bundler&#39; 以及 &#39;--noEmit&#39; 或 &#39;--emitDeclarationOnly&#39;。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;rewriteRelativeImportExtensions&quot;: true,          /* 在输出文件中，将相对导入路径中的 &#39;.ts&#39;, &#39;.tsx&#39;, &#39;.mts&#39;, 和 &#39;.cts&#39; 文件扩展名重写为其对应的 JavaScript 扩展名。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;resolvePackageJsonExports&quot;: true,                /* 在解析包导入时，使用 package.json 的 &#39;exports&#39; 字段。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;resolvePackageJsonImports&quot;: true,                /* 在解析导入时，使用 package.json 的 &#39;imports&#39; 字段。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;noUncheckedSideEffectImports&quot;: true,             /* 禁止从没有副作用的导入中导入未使用的绑定。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;customConditions&quot;: [],                           /* 解析导入时，除了特定于解析器的默认条件外，还要设置的额外条件。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;resolveJsonModule&quot;: true,                        /* 允许导入 .json 文件。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;allowArbitraryExtensions&quot;: true,                 /* 允许导入任何扩展名的文件，前提是存在一个声明文件。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;noResolve&quot;: true,                                /* 禁止 &#39;import&#39;、&#39;require&#39; 或 &#39;&lt;reference&gt;&#39; 扩大 TypeScript 应添加到项目中的文件数量。 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* JavaScript Support */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;allowJs&quot;: true,                                  /* 允许 JavaScript 文件成为程序的一部分。使用 &#39;checkJS&#39; 选项从这些文件中获取错误。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;checkJs&quot;: true,                                  /* 在进行类型检查的 JavaScript 文件中启用错误报告。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;maxNodeModuleJsDepth&quot;: 1,                        /* 指定用于检查 &#39;node_modules&#39; 中 JavaScript 文件的最大文件夹深度。仅在 &#39;allowJs&#39; 为 true 时适用。 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* Emit */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;declaration&quot;: true,                              /* 从项目中的 TypeScript 和 JavaScript 文件生成 .d.ts 文件。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;declarationMap&quot;: true,                           /* 为 .d.ts 文件创建源映射（sourcemaps）。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;emitDeclarationOnly&quot;: true,                      /* 只输出 .d.ts 文件，不输出 JavaScript 文件。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;sourceMap&quot;: true,                                /* 为生成的 JavaScript 文件创建源映射文件。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;inlineSourceMap&quot;: true,                          /* 将源映射文件内联到生成的 JavaScript 文件中。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;noEmit&quot;: true,                                   /* 禁止从编译中生成任何文件。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;outFile&quot;: &quot;./&quot;,                                  /* 指定一个文件，将所有输出捆绑到一个 JavaScript 文件中。如果 &#39;declaration&#39; 为 true，也指定一个文件捆绑所有 .d.ts 输出。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;outDir&quot;: &quot;./&quot;,                                   /* 为所有生成的文件指定一个输出文件夹。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;removeComments&quot;: true,                           /* 禁止在输出中生成注释。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;importHelpers&quot;: true,                            /* 允许每个项目从 tslib 中导入一次辅助函数，而不是在每个文件中都包含它们。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;downlevelIteration&quot;: true,                       /* 为迭代生成更兼容但更冗长且性能较低的 JavaScript。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;sourceRoot&quot;: &quot;&quot;,                                 /* 指定调试器查找引用源代码的根路径。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;mapRoot&quot;: &quot;&quot;,                                    /* 指定调试器应该定位映射文件的位置，而不是生成的位置。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;inlineSources&quot;: true,                            /* 在生成的 JavaScript 文件内的源映射中包含源代码。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;emitBOM&quot;: true,                                  /* 在输出文件的开头生成一个 UTF-8 字节顺序标记 (BOM)。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;newLine&quot;: &quot;crlf&quot;,                                /* 设置生成文件时使用的换行符。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;stripInternal&quot;: true,                            /* 禁止为 JSDoc 注释中带有 &#39;@internal&#39; 的声明生成定义。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;noEmitHelpers&quot;: true,                            /* 禁止在编译输出中生成像 &#39;__extends&#39; 这样的自定义辅助函数。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;noEmitOnError&quot;: true,                            /* 如果报告了任何类型检查错误，则禁止生成文件。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;preserveConstEnums&quot;: true,                       /* 禁止在生成的代码中擦除 &#39;const enum&#39; 声明。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;declarationDir&quot;: &quot;./&quot;,                           /* 指定生成的声明文件的输出目录。 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* Interop Constraints */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;isolatedModules&quot;: true,                          /* 确保每个文件都可以安全地转译，而无需依赖其他导入。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;verbatimModuleSyntax&quot;: true,                     /* 不转换或省略任何未标记为仅类型的导入或导出，确保它们根据 &#39;module&#39; 设置以输出文件的格式写入。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;isolatedDeclarations&quot;: true,                     /* 确保每个声明文件都可以独立使用，而无需依赖其他声明文件。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;erasableSyntaxOnly&quot;: true,                       /* 确保仅使用可擦除的语法生成代码。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;allowSyntheticDefaultImports&quot;: true,             /* 当一个模块没有默认导出时，允许使用 &#39;import x from y&#39; 这种形式。 */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;esModuleInterop&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,                             </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 生成额外的 JavaScript 以简化对 CommonJS 模块的导入。这会为类型兼容性启用 &#39;allowSyntheticDefaultImports&#39;。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;preserveSymlinks&quot;: true,                         /* 禁止将符号链接解析为其真实路径。这与 node 中的同名标志相关。 */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;forceConsistentCasingInFileNames&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,            </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 确保导入中的文件名大小写一致。 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* Type Checking */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;strict&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,                                      </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 启用所有严格的类型检查选项。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;noImplicitAny&quot;: true,                            /* 为具有隐式 &#39;any&#39; 类型的表达式和声明启用错误报告。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;strictNullChecks&quot;: true,                         /* 在类型检查时，考虑 &#39;null&#39; 和 &#39;undefined&#39;。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;strictFunctionTypes&quot;: true,                      /* 在分配函数时，检查以确保参数和返回值是子类型兼容的。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;strictBindCallApply&quot;: true,                      /* 检查 &#39;bind&#39;、&#39;call&#39; 和 &#39;apply&#39; 方法的参数是否与原始函数匹配。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;strictPropertyInitialization&quot;: true,             /* 检查在构造函数中已声明但未设置的类属性。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;noImplicitThis&quot;: true,                           /* 当 &#39;this&#39; 被赋予 &#39;any&#39; 类型时启用错误报告。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;useUnknownInCatchVariables&quot;: true,               /* 将 catch 子句变量的默认类型设置为 &#39;unknown&#39; 而不是 &#39;any&#39;。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;alwaysStrict&quot;: true,                             /* 确保始终生成 &#39;use strict&#39;。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;noUnusedLocals&quot;: true,                           /* 当局部变量未被读取时启用错误报告。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;noUnusedParameters&quot;: true,                       /* 当函数参数未被读取时引发错误。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;exactOptionalPropertyTypes&quot;: true,               /* 按照书面形式解释可选属性类型，而不是添加 &#39;undefined&#39;。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;noImplicitReturns&quot;: true,                        /* 为函数中没有显式返回的代码路径启用错误报告。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;noFallthroughCasesInSwitch&quot;: true,               /* 为 switch 语句中的 fall-through 情况启用错误报告。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;noUncheckedIndexedAccess&quot;: true,                 /* 当使用索引访问时，向类型中添加 &#39;undefined&#39;。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;noImplicitOverride&quot;: true,                       /* 确保派生类中重写的成员标有 override 修饰符。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;noPropertyAccessFromIndexSignature&quot;: true,       /* 强制对使用索引类型声明的键使用索引访问器。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;allowUnusedLabels&quot;: true,                        /* 禁止对未使用的标签进行错误报告。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;allowUnreachableCode&quot;: true,                     /* 禁止对无法访问的代码进行错误报告。 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* Completeness */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;skipDefaultLibCheck&quot;: true,                      /* 跳过对 TypeScript 附带的 .d.ts 文件的类型检查。 */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;skipLibCheck&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                                 /* 跳过对所有 .d.ts 文件的类型检查。 */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要修改配置，可以直接查阅，并参考<a href="https://www.typescriptlang.org/zh/tsconfig/" target="_blank" rel="noopener noreferrer">官文</a>给出的示例效果进行修改。</p>`,3))])}const p=s(e,[["render",h]]),c=JSON.parse('{"path":"/blogs-main/typescript/18-typescript.html","title":"18 tsconfig配置","lang":"zh-CN","frontmatter":{"title":"18 tsconfig配置","article":true,"order":18,"star":false,"category":["语言"],"tag":["typescript"],"date":"2025-08-04T00:00:00.000Z","description":"介绍tsc初始化后的 tsconfig.json 的所有配置选项","footer":"Always coding, always learning","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"18 tsconfig配置\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-04T12:13:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KBchulan\\",\\"url\\":\\"https://kbchulan.github.io/ClBlogs/\\"}]}"],["meta",{"property":"og:url","content":"https://kbchulan.github.io/ClBlogs/ClBlogs/blogs-main/typescript/18-typescript.html"}],["meta",{"property":"og:site_name","content":"KBchulan的博客"}],["meta",{"property":"og:title","content":"18 tsconfig配置"}],["meta",{"property":"og:description","content":"介绍tsc初始化后的 tsconfig.json 的所有配置选项"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-04T12:13:23.000Z"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:published_time","content":"2025-08-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-04T12:13:23.000Z"}]]},"git":{"createdTime":1754309603000,"updatedTime":1754309603000,"contributors":[{"name":"KBchulan","username":"KBchulan","email":"145010602+KBchulan@users.noreply.github.com","commits":1,"url":"https://github.com/KBchulan"}]},"readingTime":{"minutes":7.62,"words":2286},"filePathRelative":"blogs-main/typescript/18-typescript.md","excerpt":""}');export{p as comp,c as data};
