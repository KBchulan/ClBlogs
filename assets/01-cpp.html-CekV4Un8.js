import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,a as l,o as e}from"./app-9Gw1sbSH.js";const t={};function h(p,s){return e(),a("div",null,[n(" more "),s[0]||(s[0]=l(`<h1 id="_01-环境配置" tabindex="-1"><a class="header-anchor" href="#_01-环境配置"><span>01 环境配置</span></a></h1><blockquote><p>本专题记录作者学习现代 C++ 的笔记， 应该只会记录一些不太熟悉的特性。</p></blockquote><h2 id="编译器选择" tabindex="-1"><a class="header-anchor" href="#编译器选择"><span>编译器选择</span></a></h2><p>要想学习现代 C++，一个支持最新标准（如 C++20/23）的编译器是必不可少的，主流编译器主要有如下三种：</p><ul><li><p><strong>GCC</strong>：开源界的老大，跨平台，新标准支持好，标准库为 <strong>libstdc++</strong>。</p></li><li><p><strong>Clang</strong>：由 <a href="https://github.com/llvm/llvm-project" target="_blank" rel="noopener noreferrer">LLVM项目</a> 提供的 C/C++/Objective-C 编译器，比较知名的是它清晰的错误提示与clangd的良好集成，对于开发是很友好的，标准库为 <strong>libc++</strong>。</p></li><li><p><strong>MSVC</strong>：Windows 平台的官方编译器，集成在 Visual Studio 中，标准库为 <strong>MSVC STL</strong>。</p></li></ul><p>本节我们都会给出怎么安装，可以按需下载：如果基于 linux 环境，直接使用自带的包管理器即可，如果基于 windows 环境，我强烈建议使用 <strong>msys2</strong> 来搭建环境。</p><h2 id="msys2" tabindex="-1"><a class="header-anchor" href="#msys2"><span>MSYS2</span></a></h2><p><a href="https://www.msys2.org/" target="_blank" rel="noopener noreferrer">MSYS2</a> 是一个 Windows 上的软件分发和构建平台，它提供了一个类 Unix 的 shell 环境和强大的包管理器 pacman，安装环境非常方便，后续很多专题中我们配置环境都是基于这个平台。</p><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h3><p>直接在官网下载并按照默认配置安装即可，随后你会看到多个启动项，我们主要关心两种：</p><ul><li><strong>UCRT64</strong>：它使用 Windows 最新的通用 C 运行时，与 MSVC 和现代 Windows API 的兼容性最好。</li><li><strong>MINGW64</strong>：它使用旧版的 MSVCRT.dll 作为 C 运行时，在老项目中比较常见。</li></ul><p>如果你是一个全新的环境或者说要做一个新项目了，首选一定是 <strong>UCRT64</strong>，接下来我们所有的操作都是基于这个环境进行。</p><h3 id="工具链" tabindex="-1"><a class="header-anchor" href="#工具链"><span>工具链</span></a></h3><p>首先需要说明的是，UCRT64 环境的包管理器是 <strong>pacman</strong>，如果有用过 archlinux 的话，应该会比较熟悉，当然你也可以看一下 <a href="https://www.atlantic.net/dedicated-server-hosting/how-to-use-pacman-in-arch-linux/" target="_blank" rel="noopener noreferrer">这篇文章</a> 来快速上手使用。</p><p>首先打开 msys2 终端：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 更新包数据库和基础包</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pacman</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Syu</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 安装 GCC, Clang, GDB, CMake 和 Ninja 等所有必需工具</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 此处使用 toolchain 直接安装，如果缺少什么可以自行补充</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pacman</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -S</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mingw-w64-ucrt-x86_64-toolchain</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里举一个例子，如果你需要安装 <code>yaml-cpp</code>，可以按照如下操作，其他各种第三方库大都可以按照如上方式进行安装：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查询包名</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pacman</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Ss</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yaml-cpp</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 然后找到对应 ucrt64 的包，选择合适的版本后，复制名字进行安装</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pacman</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -S</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mingw-w64-ucrt-x86_64-yaml-cpp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后把 ucrt64 的 <code>bin</code> 目录添加到环境变量，然后打开一下 powershell 验证一下即可：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 2025-8-13</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gcc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --version</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 15.2.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ubuntu-22-04" tabindex="-1"><a class="header-anchor" href="#ubuntu-22-04"><span>Ubuntu 22.04</span></a></h2><p><a href="https://ubuntu.com/desktop" target="_blank" rel="noopener noreferrer">Ubuntu</a>是一个基于deban的开源操作系统，使用<strong>apt</strong>作为包管理工具。其最新的版本是Ubuntu 24.04 LTS，而 22.04 LTS是比较稳定的长期支持版本。</p><p>笔者使用Ubuntu 22.04作为另一个系统，其缺憾是apt最高只支持gcc12，而gcc12只能初步支持C++ 14。<a href="https://gcc.gnu.org/projects/cxx-status.html" target="_blank" rel="noopener noreferrer">gcc</a>或者 <a href="https://clang.llvm.org/cxx_status.html" target="_blank" rel="noopener noreferrer">clang</a>版本对于C++版本的支持情况可以在这里找。</p><p>如何在Ubuntu 22.04上使用gcc 15.2.0并使用C++ 23特性？ 直接从gnu官网下载源码编译即可。</p><ol><li>下载 <a href="https://ftp.gnu.org/gnu/gcc/gcc-15.2.0/" target="_blank" rel="noopener noreferrer">gcc 15.2.0</a>压缩包，解压并进入<code>/.../gcc-15.2.0/</code></li><li>下载依赖项：</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./contrib/download_prerequisites</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li>创建构建目录并配置：</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">./configure</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build=x86_64-linux-gnu</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --host=x86_64-linux-gnu</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --target=x86_64-linux-gnu</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --prefix=/usr/local/gcc-15.2.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --enable-checking=release</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --enable-languages=c,c++</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --disable-multilib</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --program-suffix=-15.2.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>编译和安装 （笔者编译了4个小时以上）</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -j$(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nproc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 使用所有可用的CPU核心</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> make</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>设置优先级和配置环境变量</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update-alternatives</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/bin/g++</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> g++</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/local/gcc-15.2.0/bin/g++-15.2.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 150</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update-alternatives</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/bin/gcc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gcc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/local/gcc-15.2.0/bin/gcc-15.2.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 150</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> LD_LIBRARY_PATH</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">usr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">local</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">gcc-15</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lib64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$LD_LIBRARY_PATH</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> CPLUS_INCLUDE_PATH</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">usr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">local</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">gcc-15</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">include</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">15</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$CPLUS_INCLUDE_PATH</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>最后测试一下gcc版本即可：</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gcc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Using</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> built-in</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> specs.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">COLLECT_GCC</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">gcc</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">COLLECT_LTO_WRAPPER</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/usr/local/gcc-15.2.0/libexec/gcc/x86_64-linux-gnu/15.2.0/lto-wrapper</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Target:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> x86_64-linux-gnu</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Configured</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> with:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./configure</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build=x86_64-linux-gnu</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --host=x86_64-linux-gnu</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --target=x86_64-linux-gnu</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --prefix=/usr/local/gcc-15.2.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --enable-checking=release</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --enable-languages=c,c++</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --disable-multilib</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --program-suffix=-15.2.0</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Thread</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> model:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> posix</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Supported</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> LTO</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> compression</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> algorithms:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> zlib</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> zstd</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gcc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> version</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 15.2.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (GCC)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="开发工具" tabindex="-1"><a class="header-anchor" href="#开发工具"><span>开发工具</span></a></h2><p>笔者比较喜欢使用 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener noreferrer">vscode</a>，如果你更倾向于使用 vs 或者 clion，可以直接跳过这一部分。</p><p>主要安装两个插件即可：</p><ul><li>clangd：强烈推荐，不止是 IntelliSense，还支持 CMake 路径，以及类似于 clion 的数据类型显示、修改建议等，体验上非常丝滑。</li><li>CMake Tools：这个插件提供了对 CMake 的支持，可以方便地进行构建和调试。</li></ul><p>对于 clangd 配置，笔者的配置如下，可以参考一下，这个属于全局的配置：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;clangd.arguments&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;--query-driver=C:/msys64/ucrt64/bin/*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;--header-insertion=iwyu&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;--compile-commands-dir=\${workspaceFolder}/build&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;--background-index&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;--all-scopes-completion&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;--completion-style=detailed&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;--pch-storage=memory&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;--clang-tidy&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;clangd.fallbackFlags&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;-IC:/msys64/ucrt64/include&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;--target=x86_64-w64-mingw32&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;-std=c++23&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;-Wno-pragma-pack&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，也可以在项目根目录创建 <code>.clangd</code> 文件，对当前项目进行配置，这个会覆盖掉全局配置。</p><h2 id="构建系统" tabindex="-1"><a class="header-anchor" href="#构建系统"><span>构建系统</span></a></h2><p>上文中我们提到了 CMake，这个是一个构建系统生成器，可以根据配置生成不同平台的构建描述文件，用于构建项目，此处我们介绍一下构建系统常用的都有什么，详情可以自行查阅：</p><ul><li><strong>构建系统生成器</strong>：cmake、meson、qmake、xmake</li><li><strong>构建描述文件</strong>：makefile、.ninja、.vcxproj</li><li><strong>构建引擎</strong>：make、ninja、msbuild、nmake、gmake</li></ul><p>笔者的配置是 <code>cmake + ninja</code>，不管是构建还是编译都是非常的快速，不过在 Windows 系统下，默认情况 cmake 会生成 MSVC 解决方案，可以在环境变量里创建一个 <code>CMAKE_GENERATOR</code> 变量，值为 <code>Ninja</code>，这样就好了。</p><p>我原来写过一个 cmake 的 <a href="https://github.com/KBchulan/CMakeTemplate" target="_blank" rel="noopener noreferrer">项目模板</a>，可以拿来直接使用。</p>`,46))])}const d=i(t,[["render",h]]),c=JSON.parse('{"path":"/blogs-main/cpp/01-cpp.html","title":"01 环境配置","lang":"zh-CN","frontmatter":{"title":"01 环境配置","article":true,"order":1,"star":false,"category":["语言"],"tag":["cpp"],"date":"2025-06-04T00:00:00.000Z","description":"c++ 篇章的总览介绍","footer":"Always coding, always learning","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01 环境配置\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-17T13:15:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KBchulan\\",\\"url\\":\\"https://kbchulan.github.io/ClBlogs/\\"}]}"],["meta",{"property":"og:url","content":"https://kbchulan.github.io/ClBlogs/ClBlogs/blogs-main/cpp/01-cpp.html"}],["meta",{"property":"og:site_name","content":"KBchulan的博客"}],["meta",{"property":"og:title","content":"01 环境配置"}],["meta",{"property":"og:description","content":"c++ 篇章的总览介绍"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-17T13:15:36.000Z"}],["meta",{"property":"article:tag","content":"cpp"}],["meta",{"property":"article:published_time","content":"2025-06-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-17T13:15:36.000Z"}]]},"git":{"createdTime":1749012848000,"updatedTime":1758114936000,"contributors":[{"name":"KBchulan","username":"KBchulan","email":"18737519552@163.com","commits":14,"url":"https://github.com/KBchulan"},{"name":"fgloris","username":"fgloris","email":"stepthenfriedman@gmail.com","commits":1,"url":"https://github.com/fgloris"}]},"readingTime":{"minutes":5.02,"words":1507},"filePathRelative":"blogs-main/cpp/01-cpp.md","excerpt":""}');export{d as comp,c as data};
